import React, { useState } from 'react'
import './App.css'
import cdpService from './services/cdpService'
import QuoteDisplay from './components/QuoteDisplay'
import FlowInfo from './components/FlowInfo'
import APITester from './components/APITester'
import BuyOptionsDisplay from './components/BuyOptionsDisplay'

function App() {
  const [walletAddress, setWalletAddress] = useState('')
  const [amount, setAmount] = useState('100000')
  const [isLoading, setIsLoading] = useState(false)
  const [quote, setQuote] = useState(null)
  const [showQuote, setShowQuote] = useState(false)

  const handleGetQuote = async () => {
    if (!walletAddress || !amount) {
      alert('Por favor completa todos los campos')
      return
    }

    setIsLoading(true)
    
    try {
      // Obtener quote del servicio CDP (ahora en COP)
      const quoteData = await cdpService.getQuote(parseFloat(amount))
      setQuote(quoteData)
      setShowQuote(true)
      
    } catch (error) {
      console.error('Error:', error)
      alert('Error al obtener el quote')
    } finally {
      setIsLoading(false)
    }
  }

  const handleAmountButton = (amountValue) => {
    setAmount(amountValue.toString())
  }

  const handleProceedWithOnramp = async () => {
    if (!quote) return
    
    setIsLoading(true)
    
    try {
      console.log('üöÄ Iniciando onramp para:', walletAddress, 'Monto COP:', amount)
      
      // Opci√≥n 1: Usar Session Token (funciona)
      try {
        console.log('üîÑ Intentando Session Token...');
        const onrampData = await cdpService.generateOnrampURL(walletAddress, parseFloat(amount))
        
        console.log('‚úÖ Onramp data generada:', onrampData)
        console.log('‚úÖ URL generada:', onrampData.url)
        
        // Verificar que la URL se gener√≥ correctamente
        if (!onrampData.url || onrampData.url.includes('undefined')) {
          throw new Error('URL de onramp no v√°lida generada')
        }
        
        // Redirigir al usuario a la URL de onramp
        window.open(onrampData.url, '_blank')
        
        // Resetear el estado
        setShowQuote(false)
        setQuote(null)
        
        alert(`üéâ ¬°Onramp iniciado exitosamente! 
        
‚úÖ Session Token generado
‚úÖ URL de Coinbase creada
üåê Has sido redirigido a Coinbase para comprar Celo

El flujo continuar√° autom√°ticamente despu√©s de la compra.`)
        
        return;
      } catch (sessionError) {
        console.warn('‚ö†Ô∏è Session Token fall√≥, intentando Buy Quote...', sessionError);
      }
      
      // Opci√≥n 2: Usar Buy Quote (puede fallar por permisos)
      try {
        console.log('üîÑ Intentando Buy Quote...');
        const buyQuoteData = await cdpService.generateBuyQuote(walletAddress, parseFloat(amount));
        console.log('‚úÖ Buy Quote generado:', buyQuoteData);
        
        if (buyQuoteData.onrampUrl) {
          window.open(buyQuoteData.onrampUrl, '_blank');
          setShowQuote(false);
          setQuote(null);
          
          alert(`üéâ ¬°Onramp iniciado con Buy Quote! 
          
‚úÖ Buy Quote generado
‚úÖ URL de Coinbase creada
üåê Has sido redirigido a Coinbase para comprar Celo`)
          
          return;
        }
      } catch (buyQuoteError) {
        console.warn('‚ö†Ô∏è Buy Quote fall√≥:', buyQuoteError);
      }
      
      throw new Error('No se pudo generar URL de onramp con ning√∫n m√©todo');
      
    } catch (error) {
      console.error('‚ùå Error completo en onramp:', error)
      alert(`‚ùå Error al iniciar el onramp: ${error.message}

üí° El backend est√° funcionando pero puede haber un problema con los permisos de la API Key para Buy Quote.

‚úÖ Session Token funciona
‚ùå Buy Quote necesita permisos adicionales

Por favor, verifica la consola del navegador para m√°s detalles.`)
    } finally {
      setIsLoading(false)
    }
  }

  const handleCancelQuote = () => {
    setShowQuote(false)
    setQuote(null)
  }



  return (
    <div className="app">
      <header className="app-header">
        <h1>üöÄ cCOP Onramp App</h1>
        <p>Compra cCOP usando Coinbase y Uniswap</p>
        <div className="testing-notice success">
          ‚úÖ <strong>JWT AUTHENTICATION FUNCIONANDO:</strong> Backend integrado con CDP SDK oficial. Session Token gener√°ndose exitosamente.
        </div>
      </header>

      <main className="app-main">
        {/* Secci√≥n superior: Flujo y Opciones lado a lado */}
        <div className="top-section">
          <div className="flow-section">
            <FlowInfo />
          </div>
          <div className="options-section">
            <BuyOptionsDisplay />
          </div>
        </div>
        
        {/* Secci√≥n del formulario */}
        <div className="form-container">
          <div className="form-group">
            <label htmlFor="wallet">Direcci√≥n de Wallet:</label>
            <input
              id="wallet"
              type="text"
              placeholder="0x... o nombre.eth"
              value={walletAddress}
              onChange={(e) => setWalletAddress(e.target.value)}
            />
          </div>

          <div className="form-group">
            <label htmlFor="amount">Monto en COP:</label>
            <input
              id="amount"
              type="number"
              placeholder="100000"
              min="10000"
              value={amount}
              onChange={(e) => setAmount(e.target.value)}
            />
            <div className="amount-buttons">
              <button 
                type="button" 
                onClick={() => handleAmountButton(100000)}
                className="amount-btn"
              >
                100.000 COP
              </button>
              <button 
                type="button" 
                onClick={() => handleAmountButton(250000)}
                className="amount-btn"
              >
                250.000 COP
              </button>
              <button 
                type="button" 
                onClick={() => handleAmountButton(500000)}
                className="amount-btn"
              >
                500.000 COP
              </button>
              <button 
                type="button" 
                onClick={() => handleAmountButton(1000000)}
                className="amount-btn"
              >
                1.000.000 COP
              </button>
            </div>
          </div>

          <button 
            onClick={handleGetQuote}
            disabled={isLoading || !walletAddress || !amount}
            className="onramp-button"
          >
            {isLoading ? 'Obteniendo Quote...' : 'Obtener Quote'}
          </button>
        </div>

        {/* Mostrar quote si est√° disponible */}
        {showQuote && quote && (
          <QuoteDisplay 
            quote={quote}
            onProceed={handleProceedWithOnramp}
            onCancel={handleCancelQuote}
          />
        )}
        
        {/* Secci√≥n de testing */}
        <APITester onTestAPI={handleTestAPI} />
      </main>
    </div>
  )
}

export default App
