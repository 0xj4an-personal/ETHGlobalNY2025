import { http } from "msw";
import type { EvmSmartAccount, EvmUserOperation, ListEvmSmartAccounts200, ListSpendPermissions200 } from "../coinbaseDeveloperPlatformAPIs.schemas.js";
export declare const getListEvmSmartAccountsResponseMock: () => ListEvmSmartAccounts200;
export declare const getCreateEvmSmartAccountResponseMock: (overrideResponse?: Partial<EvmSmartAccount>) => EvmSmartAccount;
export declare const getGetEvmSmartAccountByNameResponseMock: (overrideResponse?: Partial<EvmSmartAccount>) => EvmSmartAccount;
export declare const getGetEvmSmartAccountResponseMock: (overrideResponse?: Partial<EvmSmartAccount>) => EvmSmartAccount;
export declare const getUpdateEvmSmartAccountResponseMock: (overrideResponse?: Partial<EvmSmartAccount>) => EvmSmartAccount;
export declare const getPrepareUserOperationResponseMock: (overrideResponse?: Partial<EvmUserOperation>) => EvmUserOperation;
export declare const getGetUserOperationResponseMock: (overrideResponse?: Partial<EvmUserOperation>) => EvmUserOperation;
export declare const getSendUserOperationResponseMock: (overrideResponse?: Partial<EvmUserOperation>) => EvmUserOperation;
export declare const getCreateSpendPermissionResponseMock: (overrideResponse?: Partial<EvmUserOperation>) => EvmUserOperation;
export declare const getListSpendPermissionsResponseMock: () => ListSpendPermissions200;
export declare const getRevokeSpendPermissionResponseMock: (overrideResponse?: Partial<EvmUserOperation>) => EvmUserOperation;
export declare const getListEvmSmartAccountsMockHandler: (overrideResponse?: ListEvmSmartAccounts200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ListEvmSmartAccounts200> | ListEvmSmartAccounts200)) => import("msw").HttpHandler;
export declare const getCreateEvmSmartAccountMockHandler: (overrideResponse?: EvmSmartAccount | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<EvmSmartAccount> | EvmSmartAccount)) => import("msw").HttpHandler;
export declare const getGetEvmSmartAccountByNameMockHandler: (overrideResponse?: EvmSmartAccount | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<EvmSmartAccount> | EvmSmartAccount)) => import("msw").HttpHandler;
export declare const getGetEvmSmartAccountMockHandler: (overrideResponse?: EvmSmartAccount | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<EvmSmartAccount> | EvmSmartAccount)) => import("msw").HttpHandler;
export declare const getUpdateEvmSmartAccountMockHandler: (overrideResponse?: EvmSmartAccount | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<EvmSmartAccount> | EvmSmartAccount)) => import("msw").HttpHandler;
export declare const getPrepareUserOperationMockHandler: (overrideResponse?: EvmUserOperation | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<EvmUserOperation> | EvmUserOperation)) => import("msw").HttpHandler;
export declare const getGetUserOperationMockHandler: (overrideResponse?: EvmUserOperation | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<EvmUserOperation> | EvmUserOperation)) => import("msw").HttpHandler;
export declare const getSendUserOperationMockHandler: (overrideResponse?: EvmUserOperation | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<EvmUserOperation> | EvmUserOperation)) => import("msw").HttpHandler;
export declare const getCreateSpendPermissionMockHandler: (overrideResponse?: EvmUserOperation | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<EvmUserOperation> | EvmUserOperation)) => import("msw").HttpHandler;
export declare const getListSpendPermissionsMockHandler: (overrideResponse?: ListSpendPermissions200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ListSpendPermissions200> | ListSpendPermissions200)) => import("msw").HttpHandler;
export declare const getRevokeSpendPermissionMockHandler: (overrideResponse?: EvmUserOperation | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<EvmUserOperation> | EvmUserOperation)) => import("msw").HttpHandler;
export declare const getEvmSmartAccountsMock: () => import("msw").HttpHandler[];
//# sourceMappingURL=evm-smart-accounts.msw.d.ts.map