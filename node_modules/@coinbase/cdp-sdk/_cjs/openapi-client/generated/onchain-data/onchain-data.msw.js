"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOnchainDataMock = exports.getListDataTokenBalancesMockHandler = exports.getListTokensForAccountMockHandler = exports.getRunSQLQueryMockHandler = exports.getListDataTokenBalancesResponseMock = exports.getListTokensForAccountResponseMock = exports.getRunSQLQueryResponseMock = void 0;
/**
 * Generated by orval v7.6.0 🍺
 * Do not edit manually.
 * Coinbase Developer Platform APIs
 * The Coinbase Developer Platform APIs - leading the world's transition onchain.
 * OpenAPI spec version: 2.0.0
 */
const faker_1 = require("@faker-js/faker");
const msw_1 = require("msw");
const coinbaseDeveloperPlatformAPIs_schemas_js_1 = require("../coinbaseDeveloperPlatformAPIs.schemas.js");
const getRunSQLQueryResponseMock = (overrideResponse = {}) => ({
    result: faker_1.faker.helpers.arrayElement([
        Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({})),
        undefined,
    ]),
    schema: faker_1.faker.helpers.arrayElement([
        {
            columns: faker_1.faker.helpers.arrayElement([
                Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                    name: faker_1.faker.helpers.arrayElement([faker_1.faker.string.alpha(20), undefined]),
                    type: faker_1.faker.helpers.arrayElement([
                        faker_1.faker.helpers.arrayElement([
                            "String",
                            "UInt8",
                            "UInt16",
                            "UInt32",
                            "UInt64",
                            "UInt128",
                            "UInt256",
                            "Int8",
                            "Int16",
                            "Int32",
                            "Int64",
                            "Int128",
                            "Int256",
                            "Float32",
                            "Float64",
                            "Bool",
                            "Date",
                            "DateTime",
                            "DateTime64",
                            "UUID",
                        ]),
                        undefined,
                    ]),
                })),
                undefined,
            ]),
        },
        undefined,
    ]),
    metadata: faker_1.faker.helpers.arrayElement([
        {
            cached: faker_1.faker.helpers.arrayElement([faker_1.faker.datatype.boolean(), undefined]),
            executionTimeMs: faker_1.faker.helpers.arrayElement([
                faker_1.faker.number.int({ min: undefined, max: undefined }),
                undefined,
            ]),
            rowCount: faker_1.faker.helpers.arrayElement([
                faker_1.faker.number.int({ min: undefined, max: undefined }),
                undefined,
            ]),
        },
        undefined,
    ]),
    ...overrideResponse,
});
exports.getRunSQLQueryResponseMock = getRunSQLQueryResponseMock;
const getListTokensForAccountResponseMock = (overrideResponse = {}) => ({
    accountAddress: faker_1.faker.helpers.arrayElement([faker_1.faker.string.alpha(20), undefined]),
    tokenAddresses: faker_1.faker.helpers.arrayElement([
        Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]{40}$")),
        undefined,
    ]),
    totalCount: faker_1.faker.helpers.arrayElement([faker_1.faker.number.int({ min: 0, max: undefined }), undefined]),
    ...overrideResponse,
});
exports.getListTokensForAccountResponseMock = getListTokensForAccountResponseMock;
const getListDataTokenBalancesResponseMock = () => ({
    ...{
        balances: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
            amount: {
                amount: faker_1.faker.helpers.fromRegExp("^[0-9]+$"),
                decimals: faker_1.faker.number.int({ min: undefined, max: undefined }),
            },
            token: {
                network: faker_1.faker.helpers.arrayElement(Object.values(coinbaseDeveloperPlatformAPIs_schemas_js_1.ListEvmTokenBalancesNetwork)),
                symbol: faker_1.faker.helpers.arrayElement([faker_1.faker.string.alpha(20), undefined]),
                name: faker_1.faker.helpers.arrayElement([faker_1.faker.string.alpha(20), undefined]),
                contractAddress: faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]{40}$"),
            },
        })),
    },
    ...{ nextPageToken: faker_1.faker.helpers.arrayElement([faker_1.faker.string.alpha(20), undefined]) },
});
exports.getListDataTokenBalancesResponseMock = getListDataTokenBalancesResponseMock;
const getRunSQLQueryMockHandler = (overrideResponse) => {
    return msw_1.http.post("*/v2/data/query/run", async (info) => {
        await (0, msw_1.delay)(0);
        return new msw_1.HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
            : (0, exports.getRunSQLQueryResponseMock)()), { status: 200, headers: { "Content-Type": "application/json" } });
    });
};
exports.getRunSQLQueryMockHandler = getRunSQLQueryMockHandler;
const getListTokensForAccountMockHandler = (overrideResponse) => {
    return msw_1.http.get("*/v2/data/evm/token-ownership/:network/:address", async (info) => {
        await (0, msw_1.delay)(0);
        return new msw_1.HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
            : (0, exports.getListTokensForAccountResponseMock)()), { status: 200, headers: { "Content-Type": "application/json" } });
    });
};
exports.getListTokensForAccountMockHandler = getListTokensForAccountMockHandler;
const getListDataTokenBalancesMockHandler = (overrideResponse) => {
    return msw_1.http.get("*/v2/data/evm/token-balances/:network/:address", async (info) => {
        await (0, msw_1.delay)(0);
        return new msw_1.HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
            : (0, exports.getListDataTokenBalancesResponseMock)()), { status: 200, headers: { "Content-Type": "application/json" } });
    });
};
exports.getListDataTokenBalancesMockHandler = getListDataTokenBalancesMockHandler;
const getOnchainDataMock = () => [
    (0, exports.getRunSQLQueryMockHandler)(),
    (0, exports.getListTokensForAccountMockHandler)(),
    (0, exports.getListDataTokenBalancesMockHandler)(),
];
exports.getOnchainDataMock = getOnchainDataMock;
//# sourceMappingURL=onchain-data.msw.js.map