"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getGetPolicyByIdResponseNetUSDChangeCriterionMock = exports.getGetPolicyByIdResponseEvmDataCriterionMock = exports.getGetPolicyByIdResponseEvmDataParameterConditionListMock = exports.getGetPolicyByIdResponseEvmDataParameterConditionMock = exports.getGetPolicyByIdResponseAbiInputMock = exports.getGetPolicyByIdResponseAbiFunctionMock = exports.getGetPolicyByIdResponseEvmAddressCriterionMock = exports.getGetPolicyByIdResponseEthValueCriterionMock = exports.getCreatePolicyResponseMock = exports.getCreatePolicyResponseMintAddressCriterionMock = exports.getCreatePolicyResponseSplValueCriterionMock = exports.getCreatePolicyResponseSplAddressCriterionMock = exports.getCreatePolicyResponseSolValueCriterionMock = exports.getCreatePolicyResponseSolAddressCriterionMock = exports.getCreatePolicyResponseSignEvmTypedDataVerifyingContractCriterionMock = exports.getCreatePolicyResponseSignEvmTypedDataFieldCriterionMock = exports.getCreatePolicyResponseEvmTypedStringConditionMock = exports.getCreatePolicyResponseEvmTypedNumericalConditionMock = exports.getCreatePolicyResponseEvmTypedAddressConditionMock = exports.getCreatePolicyResponseEvmMessageCriterionMock = exports.getCreatePolicyResponseEvmNetworkCriterionMock = exports.getCreatePolicyResponseNetUSDChangeCriterionMock = exports.getCreatePolicyResponseEvmDataCriterionMock = exports.getCreatePolicyResponseEvmDataParameterConditionListMock = exports.getCreatePolicyResponseEvmDataParameterConditionMock = exports.getCreatePolicyResponseAbiInputMock = exports.getCreatePolicyResponseAbiFunctionMock = exports.getCreatePolicyResponseEvmAddressCriterionMock = exports.getCreatePolicyResponseEthValueCriterionMock = exports.getListPoliciesResponseMock = exports.getListPoliciesResponseMintAddressCriterionMock = exports.getListPoliciesResponseSplValueCriterionMock = exports.getListPoliciesResponseSplAddressCriterionMock = exports.getListPoliciesResponseSolValueCriterionMock = exports.getListPoliciesResponseSolAddressCriterionMock = exports.getListPoliciesResponseSignEvmTypedDataVerifyingContractCriterionMock = exports.getListPoliciesResponseSignEvmTypedDataFieldCriterionMock = exports.getListPoliciesResponseEvmTypedStringConditionMock = exports.getListPoliciesResponseEvmTypedNumericalConditionMock = exports.getListPoliciesResponseEvmTypedAddressConditionMock = exports.getListPoliciesResponseEvmMessageCriterionMock = exports.getListPoliciesResponseEvmNetworkCriterionMock = exports.getListPoliciesResponseNetUSDChangeCriterionMock = exports.getListPoliciesResponseEvmDataCriterionMock = exports.getListPoliciesResponseEvmDataParameterConditionListMock = exports.getListPoliciesResponseEvmDataParameterConditionMock = exports.getListPoliciesResponseAbiInputMock = exports.getListPoliciesResponseAbiFunctionMock = exports.getListPoliciesResponseEvmAddressCriterionMock = exports.getListPoliciesResponseEthValueCriterionMock = void 0;
exports.getPolicyEngineMock = exports.getUpdatePolicyMockHandler = exports.getDeletePolicyMockHandler = exports.getGetPolicyByIdMockHandler = exports.getCreatePolicyMockHandler = exports.getListPoliciesMockHandler = exports.getUpdatePolicyResponseMock = exports.getUpdatePolicyResponseMintAddressCriterionMock = exports.getUpdatePolicyResponseSplValueCriterionMock = exports.getUpdatePolicyResponseSplAddressCriterionMock = exports.getUpdatePolicyResponseSolValueCriterionMock = exports.getUpdatePolicyResponseSolAddressCriterionMock = exports.getUpdatePolicyResponseSignEvmTypedDataVerifyingContractCriterionMock = exports.getUpdatePolicyResponseSignEvmTypedDataFieldCriterionMock = exports.getUpdatePolicyResponseEvmTypedStringConditionMock = exports.getUpdatePolicyResponseEvmTypedNumericalConditionMock = exports.getUpdatePolicyResponseEvmTypedAddressConditionMock = exports.getUpdatePolicyResponseEvmMessageCriterionMock = exports.getUpdatePolicyResponseEvmNetworkCriterionMock = exports.getUpdatePolicyResponseNetUSDChangeCriterionMock = exports.getUpdatePolicyResponseEvmDataCriterionMock = exports.getUpdatePolicyResponseEvmDataParameterConditionListMock = exports.getUpdatePolicyResponseEvmDataParameterConditionMock = exports.getUpdatePolicyResponseAbiInputMock = exports.getUpdatePolicyResponseAbiFunctionMock = exports.getUpdatePolicyResponseEvmAddressCriterionMock = exports.getUpdatePolicyResponseEthValueCriterionMock = exports.getGetPolicyByIdResponseMock = exports.getGetPolicyByIdResponseMintAddressCriterionMock = exports.getGetPolicyByIdResponseSplValueCriterionMock = exports.getGetPolicyByIdResponseSplAddressCriterionMock = exports.getGetPolicyByIdResponseSolValueCriterionMock = exports.getGetPolicyByIdResponseSolAddressCriterionMock = exports.getGetPolicyByIdResponseSignEvmTypedDataVerifyingContractCriterionMock = exports.getGetPolicyByIdResponseSignEvmTypedDataFieldCriterionMock = exports.getGetPolicyByIdResponseEvmTypedStringConditionMock = exports.getGetPolicyByIdResponseEvmTypedNumericalConditionMock = exports.getGetPolicyByIdResponseEvmTypedAddressConditionMock = exports.getGetPolicyByIdResponseEvmMessageCriterionMock = exports.getGetPolicyByIdResponseEvmNetworkCriterionMock = void 0;
/**
 * Generated by orval v7.6.0 🍺
 * Do not edit manually.
 * Coinbase Developer Platform APIs
 * The Coinbase Developer Platform APIs - leading the world's transition onchain.
 * OpenAPI spec version: 2.0.0
 */
const faker_1 = require("@faker-js/faker");
const msw_1 = require("msw");
const coinbaseDeveloperPlatformAPIs_schemas_js_1 = require("../coinbaseDeveloperPlatformAPIs.schemas.js");
const getListPoliciesResponseEthValueCriterionMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement(["ethValue"]),
        ethValue: faker_1.faker.helpers.fromRegExp("^[0-9]+$"),
        operator: faker_1.faker.helpers.arrayElement([">", ">=", "<", "<=", "=="]),
    },
    ...overrideResponse,
});
exports.getListPoliciesResponseEthValueCriterionMock = getListPoliciesResponseEthValueCriterionMock;
const getListPoliciesResponseEvmAddressCriterionMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement(["evmAddress"]),
        addresses: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]{40}$")),
        operator: faker_1.faker.helpers.arrayElement(["in", "not in"]),
    },
    ...overrideResponse,
});
exports.getListPoliciesResponseEvmAddressCriterionMock = getListPoliciesResponseEvmAddressCriterionMock;
const getListPoliciesResponseAbiFunctionMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement(["function"]),
        name: faker_1.faker.string.alpha(20),
        inputs: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
            name: faker_1.faker.helpers.arrayElement([faker_1.faker.string.alpha(20), undefined]),
            type: faker_1.faker.string.alpha(20),
            internalType: faker_1.faker.helpers.arrayElement([faker_1.faker.string.alpha(20), undefined]),
            components: faker_1.faker.helpers.arrayElement([[], undefined]),
        })),
        outputs: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
            name: faker_1.faker.helpers.arrayElement([faker_1.faker.string.alpha(20), undefined]),
            type: faker_1.faker.string.alpha(20),
            internalType: faker_1.faker.helpers.arrayElement([faker_1.faker.string.alpha(20), undefined]),
            components: faker_1.faker.helpers.arrayElement([[], undefined]),
        })),
        constant: faker_1.faker.helpers.arrayElement([faker_1.faker.datatype.boolean(), undefined]),
        payable: faker_1.faker.helpers.arrayElement([faker_1.faker.datatype.boolean(), undefined]),
        stateMutability: faker_1.faker.helpers.arrayElement(Object.values(coinbaseDeveloperPlatformAPIs_schemas_js_1.AbiStateMutability)),
        gas: faker_1.faker.helpers.arrayElement([
            faker_1.faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
    },
    ...overrideResponse,
});
exports.getListPoliciesResponseAbiFunctionMock = getListPoliciesResponseAbiFunctionMock;
const getListPoliciesResponseAbiInputMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement([
            "constructor",
            "error",
            "event",
            "fallback",
            "receive",
        ]),
        additionalProperties: faker_1.faker.helpers.arrayElement([{}, undefined]),
    },
    ...overrideResponse,
});
exports.getListPoliciesResponseAbiInputMock = getListPoliciesResponseAbiInputMock;
const getListPoliciesResponseEvmDataParameterConditionMock = (overrideResponse = {}) => ({
    ...{
        name: faker_1.faker.string.alpha(20),
        operator: faker_1.faker.helpers.arrayElement([">", ">=", "<", "<=", "=="]),
        value: faker_1.faker.string.alpha(20),
    },
    ...overrideResponse,
});
exports.getListPoliciesResponseEvmDataParameterConditionMock = getListPoliciesResponseEvmDataParameterConditionMock;
const getListPoliciesResponseEvmDataParameterConditionListMock = (overrideResponse = {}) => ({
    ...{
        name: faker_1.faker.string.alpha(20),
        operator: faker_1.faker.helpers.arrayElement(["in", "not in"]),
        values: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.string.alpha(20)),
    },
    ...overrideResponse,
});
exports.getListPoliciesResponseEvmDataParameterConditionListMock = getListPoliciesResponseEvmDataParameterConditionListMock;
const getListPoliciesResponseEvmDataCriterionMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement(["evmData"]),
        abi: faker_1.faker.helpers.arrayElement([
            faker_1.faker.helpers.arrayElement(Object.values(coinbaseDeveloperPlatformAPIs_schemas_js_1.KnownAbiType)),
            Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.arrayElement([
                { ...(0, exports.getListPoliciesResponseAbiFunctionMock)() },
                { ...(0, exports.getListPoliciesResponseAbiInputMock)() },
            ])),
        ]),
        conditions: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
            function: faker_1.faker.string.alpha(20),
            params: faker_1.faker.helpers.arrayElement([
                Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.arrayElement([
                    { ...(0, exports.getListPoliciesResponseEvmDataParameterConditionMock)() },
                    { ...(0, exports.getListPoliciesResponseEvmDataParameterConditionListMock)() },
                ])),
                undefined,
            ]),
        })),
    },
    ...overrideResponse,
});
exports.getListPoliciesResponseEvmDataCriterionMock = getListPoliciesResponseEvmDataCriterionMock;
const getListPoliciesResponseNetUSDChangeCriterionMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement(["netUSDChange"]),
        changeCents: faker_1.faker.number.int({ min: undefined, max: undefined }),
        operator: faker_1.faker.helpers.arrayElement([">", ">=", "<", "<=", "=="]),
    },
    ...overrideResponse,
});
exports.getListPoliciesResponseNetUSDChangeCriterionMock = getListPoliciesResponseNetUSDChangeCriterionMock;
const getListPoliciesResponseEvmNetworkCriterionMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement(["evmNetwork"]),
        networks: faker_1.faker.helpers.arrayElements([
            "base-sepolia",
            "base",
            "ethereum",
            "ethereum-sepolia",
            "avalanche",
            "polygon",
            "optimism",
            "arbitrum",
            "zora",
            "bnb",
        ]),
        operator: faker_1.faker.helpers.arrayElement(["in", "not in"]),
    },
    ...overrideResponse,
});
exports.getListPoliciesResponseEvmNetworkCriterionMock = getListPoliciesResponseEvmNetworkCriterionMock;
const getListPoliciesResponseEvmMessageCriterionMock = (overrideResponse = {}) => ({
    ...{ type: faker_1.faker.helpers.arrayElement(["evmMessage"]), match: faker_1.faker.string.alpha(20) },
    ...overrideResponse,
});
exports.getListPoliciesResponseEvmMessageCriterionMock = getListPoliciesResponseEvmMessageCriterionMock;
const getListPoliciesResponseEvmTypedAddressConditionMock = (overrideResponse = {}) => ({
    ...{
        addresses: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]{40}$")),
        operator: faker_1.faker.helpers.arrayElement(["in", "not in"]),
        path: faker_1.faker.string.alpha(20),
    },
    ...overrideResponse,
});
exports.getListPoliciesResponseEvmTypedAddressConditionMock = getListPoliciesResponseEvmTypedAddressConditionMock;
const getListPoliciesResponseEvmTypedNumericalConditionMock = (overrideResponse = {}) => ({
    ...{
        value: faker_1.faker.helpers.fromRegExp("^[0-9]+$"),
        operator: faker_1.faker.helpers.arrayElement([">", ">=", "<", "<=", "=="]),
        path: faker_1.faker.string.alpha(20),
    },
    ...overrideResponse,
});
exports.getListPoliciesResponseEvmTypedNumericalConditionMock = getListPoliciesResponseEvmTypedNumericalConditionMock;
const getListPoliciesResponseEvmTypedStringConditionMock = (overrideResponse = {}) => ({
    ...{ match: faker_1.faker.string.alpha(20), path: faker_1.faker.string.alpha(20) },
    ...overrideResponse,
});
exports.getListPoliciesResponseEvmTypedStringConditionMock = getListPoliciesResponseEvmTypedStringConditionMock;
const getListPoliciesResponseSignEvmTypedDataFieldCriterionMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement(["evmTypedDataField"]),
        types: {
            types: {
                [faker_1.faker.string.alphanumeric(5)]: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                    name: faker_1.faker.helpers.arrayElement([faker_1.faker.string.alpha(20), undefined]),
                    type: faker_1.faker.helpers.arrayElement([faker_1.faker.string.alpha(20), undefined]),
                })),
            },
            primaryType: faker_1.faker.string.alpha(20),
        },
        conditions: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.arrayElement([
            { ...(0, exports.getListPoliciesResponseEvmTypedAddressConditionMock)() },
            { ...(0, exports.getListPoliciesResponseEvmTypedNumericalConditionMock)() },
            { ...(0, exports.getListPoliciesResponseEvmTypedStringConditionMock)() },
        ])),
    },
    ...overrideResponse,
});
exports.getListPoliciesResponseSignEvmTypedDataFieldCriterionMock = getListPoliciesResponseSignEvmTypedDataFieldCriterionMock;
const getListPoliciesResponseSignEvmTypedDataVerifyingContractCriterionMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement(["evmTypedDataVerifyingContract"]),
        addresses: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]{40}$")),
        operator: faker_1.faker.helpers.arrayElement(["in", "not in"]),
    },
    ...overrideResponse,
});
exports.getListPoliciesResponseSignEvmTypedDataVerifyingContractCriterionMock = getListPoliciesResponseSignEvmTypedDataVerifyingContractCriterionMock;
const getListPoliciesResponseSolAddressCriterionMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement(["solAddress"]),
        addresses: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.fromRegExp("^[1-9A-HJ-NP-Za-km-z]{32,44}$")),
        operator: faker_1.faker.helpers.arrayElement(["in", "not in"]),
    },
    ...overrideResponse,
});
exports.getListPoliciesResponseSolAddressCriterionMock = getListPoliciesResponseSolAddressCriterionMock;
const getListPoliciesResponseSolValueCriterionMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement(["solValue"]),
        solValue: faker_1.faker.string.alpha(20),
        operator: faker_1.faker.helpers.arrayElement([">", ">=", "<", "<=", "=="]),
    },
    ...overrideResponse,
});
exports.getListPoliciesResponseSolValueCriterionMock = getListPoliciesResponseSolValueCriterionMock;
const getListPoliciesResponseSplAddressCriterionMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement(["splAddress"]),
        addresses: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.fromRegExp("^[1-9A-HJ-NP-Za-km-z]{32,44}$")),
        operator: faker_1.faker.helpers.arrayElement(["in", "not in"]),
    },
    ...overrideResponse,
});
exports.getListPoliciesResponseSplAddressCriterionMock = getListPoliciesResponseSplAddressCriterionMock;
const getListPoliciesResponseSplValueCriterionMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement(["splValue"]),
        splValue: faker_1.faker.string.alpha(20),
        operator: faker_1.faker.helpers.arrayElement([">", ">=", "<", "<=", "=="]),
    },
    ...overrideResponse,
});
exports.getListPoliciesResponseSplValueCriterionMock = getListPoliciesResponseSplValueCriterionMock;
const getListPoliciesResponseMintAddressCriterionMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement(["mintAddress"]),
        addresses: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.fromRegExp("^[1-9A-HJ-NP-Za-km-z]{32,44}$")),
        operator: faker_1.faker.helpers.arrayElement(["in", "not in"]),
    },
    ...overrideResponse,
});
exports.getListPoliciesResponseMintAddressCriterionMock = getListPoliciesResponseMintAddressCriterionMock;
const getListPoliciesResponseMock = () => ({
    ...{
        policies: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
            id: faker_1.faker.helpers.fromRegExp("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"),
            description: faker_1.faker.helpers.arrayElement([
                faker_1.faker.helpers.fromRegExp("^[A-Za-z0-9 ,.]{1,50}$"),
                undefined,
            ]),
            scope: faker_1.faker.helpers.arrayElement(["project", "account"]),
            rules: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.arrayElement([
                {
                    action: faker_1.faker.helpers.arrayElement(["reject", "accept"]),
                    operation: faker_1.faker.helpers.arrayElement(["signEvmTransaction"]),
                    criteria: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.arrayElement([
                        { ...(0, exports.getListPoliciesResponseEthValueCriterionMock)() },
                        { ...(0, exports.getListPoliciesResponseEvmAddressCriterionMock)() },
                        { ...(0, exports.getListPoliciesResponseEvmDataCriterionMock)() },
                        { ...(0, exports.getListPoliciesResponseNetUSDChangeCriterionMock)() },
                    ])),
                },
                {
                    action: faker_1.faker.helpers.arrayElement(["reject", "accept"]),
                    operation: faker_1.faker.helpers.arrayElement(["sendEvmTransaction"]),
                    criteria: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.arrayElement([
                        { ...(0, exports.getListPoliciesResponseEthValueCriterionMock)() },
                        { ...(0, exports.getListPoliciesResponseEvmAddressCriterionMock)() },
                        { ...(0, exports.getListPoliciesResponseEvmNetworkCriterionMock)() },
                        { ...(0, exports.getListPoliciesResponseEvmDataCriterionMock)() },
                        { ...(0, exports.getListPoliciesResponseNetUSDChangeCriterionMock)() },
                    ])),
                },
                {
                    action: faker_1.faker.helpers.arrayElement(["reject", "accept"]),
                    operation: faker_1.faker.helpers.arrayElement(["signEvmMessage"]),
                    criteria: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.arrayElement([
                        { ...(0, exports.getListPoliciesResponseEvmMessageCriterionMock)() },
                    ])),
                },
                {
                    action: faker_1.faker.helpers.arrayElement(["reject", "accept"]),
                    operation: faker_1.faker.helpers.arrayElement(["signEvmTypedData"]),
                    criteria: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.arrayElement([
                        { ...(0, exports.getListPoliciesResponseSignEvmTypedDataFieldCriterionMock)() },
                        { ...(0, exports.getListPoliciesResponseSignEvmTypedDataVerifyingContractCriterionMock)() },
                    ])),
                },
                {
                    action: faker_1.faker.helpers.arrayElement(["reject", "accept"]),
                    operation: faker_1.faker.helpers.arrayElement(["signSolTransaction"]),
                    criteria: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.arrayElement([
                        { ...(0, exports.getListPoliciesResponseSolAddressCriterionMock)() },
                        { ...(0, exports.getListPoliciesResponseSolValueCriterionMock)() },
                        { ...(0, exports.getListPoliciesResponseSplAddressCriterionMock)() },
                        { ...(0, exports.getListPoliciesResponseSplValueCriterionMock)() },
                        { ...(0, exports.getListPoliciesResponseMintAddressCriterionMock)() },
                    ])),
                },
                {
                    action: faker_1.faker.helpers.arrayElement(["reject", "accept"]),
                    operation: faker_1.faker.helpers.arrayElement(["sendSolTransaction"]),
                    criteria: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.arrayElement([
                        { ...(0, exports.getListPoliciesResponseSolAddressCriterionMock)() },
                        { ...(0, exports.getListPoliciesResponseSolValueCriterionMock)() },
                        { ...(0, exports.getListPoliciesResponseSplAddressCriterionMock)() },
                        { ...(0, exports.getListPoliciesResponseSplValueCriterionMock)() },
                        { ...(0, exports.getListPoliciesResponseMintAddressCriterionMock)() },
                    ])),
                },
                {
                    action: faker_1.faker.helpers.arrayElement(["reject", "accept"]),
                    operation: faker_1.faker.helpers.arrayElement(["signEvmHash"]),
                },
                {
                    action: faker_1.faker.helpers.arrayElement(["reject", "accept"]),
                    operation: faker_1.faker.helpers.arrayElement(["prepareUserOperation"]),
                    criteria: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.arrayElement([
                        { ...(0, exports.getListPoliciesResponseEthValueCriterionMock)() },
                        { ...(0, exports.getListPoliciesResponseEvmAddressCriterionMock)() },
                        { ...(0, exports.getListPoliciesResponseEvmNetworkCriterionMock)() },
                        { ...(0, exports.getListPoliciesResponseEvmDataCriterionMock)() },
                    ])),
                },
                {
                    action: faker_1.faker.helpers.arrayElement(["reject", "accept"]),
                    operation: faker_1.faker.helpers.arrayElement(["sendUserOperation"]),
                    criteria: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.arrayElement([
                        { ...(0, exports.getListPoliciesResponseEthValueCriterionMock)() },
                        { ...(0, exports.getListPoliciesResponseEvmAddressCriterionMock)() },
                        { ...(0, exports.getListPoliciesResponseEvmDataCriterionMock)() },
                    ])),
                },
            ])),
            createdAt: faker_1.faker.string.alpha(20),
            updatedAt: faker_1.faker.string.alpha(20),
        })),
    },
    ...{ nextPageToken: faker_1.faker.helpers.arrayElement([faker_1.faker.string.alpha(20), undefined]) },
});
exports.getListPoliciesResponseMock = getListPoliciesResponseMock;
const getCreatePolicyResponseEthValueCriterionMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement(["ethValue"]),
        ethValue: faker_1.faker.helpers.fromRegExp("^[0-9]+$"),
        operator: faker_1.faker.helpers.arrayElement([">", ">=", "<", "<=", "=="]),
    },
    ...overrideResponse,
});
exports.getCreatePolicyResponseEthValueCriterionMock = getCreatePolicyResponseEthValueCriterionMock;
const getCreatePolicyResponseEvmAddressCriterionMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement(["evmAddress"]),
        addresses: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]{40}$")),
        operator: faker_1.faker.helpers.arrayElement(["in", "not in"]),
    },
    ...overrideResponse,
});
exports.getCreatePolicyResponseEvmAddressCriterionMock = getCreatePolicyResponseEvmAddressCriterionMock;
const getCreatePolicyResponseAbiFunctionMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement(["function"]),
        name: faker_1.faker.string.alpha(20),
        inputs: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
            name: faker_1.faker.helpers.arrayElement([faker_1.faker.string.alpha(20), undefined]),
            type: faker_1.faker.string.alpha(20),
            internalType: faker_1.faker.helpers.arrayElement([faker_1.faker.string.alpha(20), undefined]),
            components: faker_1.faker.helpers.arrayElement([[], undefined]),
        })),
        outputs: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
            name: faker_1.faker.helpers.arrayElement([faker_1.faker.string.alpha(20), undefined]),
            type: faker_1.faker.string.alpha(20),
            internalType: faker_1.faker.helpers.arrayElement([faker_1.faker.string.alpha(20), undefined]),
            components: faker_1.faker.helpers.arrayElement([[], undefined]),
        })),
        constant: faker_1.faker.helpers.arrayElement([faker_1.faker.datatype.boolean(), undefined]),
        payable: faker_1.faker.helpers.arrayElement([faker_1.faker.datatype.boolean(), undefined]),
        stateMutability: faker_1.faker.helpers.arrayElement(Object.values(coinbaseDeveloperPlatformAPIs_schemas_js_1.AbiStateMutability)),
        gas: faker_1.faker.helpers.arrayElement([
            faker_1.faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
    },
    ...overrideResponse,
});
exports.getCreatePolicyResponseAbiFunctionMock = getCreatePolicyResponseAbiFunctionMock;
const getCreatePolicyResponseAbiInputMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement([
            "constructor",
            "error",
            "event",
            "fallback",
            "receive",
        ]),
        additionalProperties: faker_1.faker.helpers.arrayElement([{}, undefined]),
    },
    ...overrideResponse,
});
exports.getCreatePolicyResponseAbiInputMock = getCreatePolicyResponseAbiInputMock;
const getCreatePolicyResponseEvmDataParameterConditionMock = (overrideResponse = {}) => ({
    ...{
        name: faker_1.faker.string.alpha(20),
        operator: faker_1.faker.helpers.arrayElement([">", ">=", "<", "<=", "=="]),
        value: faker_1.faker.string.alpha(20),
    },
    ...overrideResponse,
});
exports.getCreatePolicyResponseEvmDataParameterConditionMock = getCreatePolicyResponseEvmDataParameterConditionMock;
const getCreatePolicyResponseEvmDataParameterConditionListMock = (overrideResponse = {}) => ({
    ...{
        name: faker_1.faker.string.alpha(20),
        operator: faker_1.faker.helpers.arrayElement(["in", "not in"]),
        values: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.string.alpha(20)),
    },
    ...overrideResponse,
});
exports.getCreatePolicyResponseEvmDataParameterConditionListMock = getCreatePolicyResponseEvmDataParameterConditionListMock;
const getCreatePolicyResponseEvmDataCriterionMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement(["evmData"]),
        abi: faker_1.faker.helpers.arrayElement([
            faker_1.faker.helpers.arrayElement(Object.values(coinbaseDeveloperPlatformAPIs_schemas_js_1.KnownAbiType)),
            Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.arrayElement([
                { ...(0, exports.getCreatePolicyResponseAbiFunctionMock)() },
                { ...(0, exports.getCreatePolicyResponseAbiInputMock)() },
            ])),
        ]),
        conditions: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
            function: faker_1.faker.string.alpha(20),
            params: faker_1.faker.helpers.arrayElement([
                Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.arrayElement([
                    { ...(0, exports.getCreatePolicyResponseEvmDataParameterConditionMock)() },
                    { ...(0, exports.getCreatePolicyResponseEvmDataParameterConditionListMock)() },
                ])),
                undefined,
            ]),
        })),
    },
    ...overrideResponse,
});
exports.getCreatePolicyResponseEvmDataCriterionMock = getCreatePolicyResponseEvmDataCriterionMock;
const getCreatePolicyResponseNetUSDChangeCriterionMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement(["netUSDChange"]),
        changeCents: faker_1.faker.number.int({ min: undefined, max: undefined }),
        operator: faker_1.faker.helpers.arrayElement([">", ">=", "<", "<=", "=="]),
    },
    ...overrideResponse,
});
exports.getCreatePolicyResponseNetUSDChangeCriterionMock = getCreatePolicyResponseNetUSDChangeCriterionMock;
const getCreatePolicyResponseEvmNetworkCriterionMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement(["evmNetwork"]),
        networks: faker_1.faker.helpers.arrayElements([
            "base-sepolia",
            "base",
            "ethereum",
            "ethereum-sepolia",
            "avalanche",
            "polygon",
            "optimism",
            "arbitrum",
            "zora",
            "bnb",
        ]),
        operator: faker_1.faker.helpers.arrayElement(["in", "not in"]),
    },
    ...overrideResponse,
});
exports.getCreatePolicyResponseEvmNetworkCriterionMock = getCreatePolicyResponseEvmNetworkCriterionMock;
const getCreatePolicyResponseEvmMessageCriterionMock = (overrideResponse = {}) => ({
    ...{ type: faker_1.faker.helpers.arrayElement(["evmMessage"]), match: faker_1.faker.string.alpha(20) },
    ...overrideResponse,
});
exports.getCreatePolicyResponseEvmMessageCriterionMock = getCreatePolicyResponseEvmMessageCriterionMock;
const getCreatePolicyResponseEvmTypedAddressConditionMock = (overrideResponse = {}) => ({
    ...{
        addresses: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]{40}$")),
        operator: faker_1.faker.helpers.arrayElement(["in", "not in"]),
        path: faker_1.faker.string.alpha(20),
    },
    ...overrideResponse,
});
exports.getCreatePolicyResponseEvmTypedAddressConditionMock = getCreatePolicyResponseEvmTypedAddressConditionMock;
const getCreatePolicyResponseEvmTypedNumericalConditionMock = (overrideResponse = {}) => ({
    ...{
        value: faker_1.faker.helpers.fromRegExp("^[0-9]+$"),
        operator: faker_1.faker.helpers.arrayElement([">", ">=", "<", "<=", "=="]),
        path: faker_1.faker.string.alpha(20),
    },
    ...overrideResponse,
});
exports.getCreatePolicyResponseEvmTypedNumericalConditionMock = getCreatePolicyResponseEvmTypedNumericalConditionMock;
const getCreatePolicyResponseEvmTypedStringConditionMock = (overrideResponse = {}) => ({
    ...{ match: faker_1.faker.string.alpha(20), path: faker_1.faker.string.alpha(20) },
    ...overrideResponse,
});
exports.getCreatePolicyResponseEvmTypedStringConditionMock = getCreatePolicyResponseEvmTypedStringConditionMock;
const getCreatePolicyResponseSignEvmTypedDataFieldCriterionMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement(["evmTypedDataField"]),
        types: {
            types: {
                [faker_1.faker.string.alphanumeric(5)]: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                    name: faker_1.faker.helpers.arrayElement([faker_1.faker.string.alpha(20), undefined]),
                    type: faker_1.faker.helpers.arrayElement([faker_1.faker.string.alpha(20), undefined]),
                })),
            },
            primaryType: faker_1.faker.string.alpha(20),
        },
        conditions: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.arrayElement([
            { ...(0, exports.getCreatePolicyResponseEvmTypedAddressConditionMock)() },
            { ...(0, exports.getCreatePolicyResponseEvmTypedNumericalConditionMock)() },
            { ...(0, exports.getCreatePolicyResponseEvmTypedStringConditionMock)() },
        ])),
    },
    ...overrideResponse,
});
exports.getCreatePolicyResponseSignEvmTypedDataFieldCriterionMock = getCreatePolicyResponseSignEvmTypedDataFieldCriterionMock;
const getCreatePolicyResponseSignEvmTypedDataVerifyingContractCriterionMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement(["evmTypedDataVerifyingContract"]),
        addresses: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]{40}$")),
        operator: faker_1.faker.helpers.arrayElement(["in", "not in"]),
    },
    ...overrideResponse,
});
exports.getCreatePolicyResponseSignEvmTypedDataVerifyingContractCriterionMock = getCreatePolicyResponseSignEvmTypedDataVerifyingContractCriterionMock;
const getCreatePolicyResponseSolAddressCriterionMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement(["solAddress"]),
        addresses: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.fromRegExp("^[1-9A-HJ-NP-Za-km-z]{32,44}$")),
        operator: faker_1.faker.helpers.arrayElement(["in", "not in"]),
    },
    ...overrideResponse,
});
exports.getCreatePolicyResponseSolAddressCriterionMock = getCreatePolicyResponseSolAddressCriterionMock;
const getCreatePolicyResponseSolValueCriterionMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement(["solValue"]),
        solValue: faker_1.faker.string.alpha(20),
        operator: faker_1.faker.helpers.arrayElement([">", ">=", "<", "<=", "=="]),
    },
    ...overrideResponse,
});
exports.getCreatePolicyResponseSolValueCriterionMock = getCreatePolicyResponseSolValueCriterionMock;
const getCreatePolicyResponseSplAddressCriterionMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement(["splAddress"]),
        addresses: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.fromRegExp("^[1-9A-HJ-NP-Za-km-z]{32,44}$")),
        operator: faker_1.faker.helpers.arrayElement(["in", "not in"]),
    },
    ...overrideResponse,
});
exports.getCreatePolicyResponseSplAddressCriterionMock = getCreatePolicyResponseSplAddressCriterionMock;
const getCreatePolicyResponseSplValueCriterionMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement(["splValue"]),
        splValue: faker_1.faker.string.alpha(20),
        operator: faker_1.faker.helpers.arrayElement([">", ">=", "<", "<=", "=="]),
    },
    ...overrideResponse,
});
exports.getCreatePolicyResponseSplValueCriterionMock = getCreatePolicyResponseSplValueCriterionMock;
const getCreatePolicyResponseMintAddressCriterionMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement(["mintAddress"]),
        addresses: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.fromRegExp("^[1-9A-HJ-NP-Za-km-z]{32,44}$")),
        operator: faker_1.faker.helpers.arrayElement(["in", "not in"]),
    },
    ...overrideResponse,
});
exports.getCreatePolicyResponseMintAddressCriterionMock = getCreatePolicyResponseMintAddressCriterionMock;
const getCreatePolicyResponseMock = (overrideResponse = {}) => ({
    id: faker_1.faker.helpers.fromRegExp("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"),
    description: faker_1.faker.helpers.arrayElement([
        faker_1.faker.helpers.fromRegExp("^[A-Za-z0-9 ,.]{1,50}$"),
        undefined,
    ]),
    scope: faker_1.faker.helpers.arrayElement(["project", "account"]),
    rules: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.arrayElement([
        {
            action: faker_1.faker.helpers.arrayElement(["reject", "accept"]),
            operation: faker_1.faker.helpers.arrayElement(["signEvmTransaction"]),
            criteria: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.arrayElement([
                { ...(0, exports.getCreatePolicyResponseEthValueCriterionMock)() },
                { ...(0, exports.getCreatePolicyResponseEvmAddressCriterionMock)() },
                { ...(0, exports.getCreatePolicyResponseEvmDataCriterionMock)() },
                { ...(0, exports.getCreatePolicyResponseNetUSDChangeCriterionMock)() },
            ])),
        },
        {
            action: faker_1.faker.helpers.arrayElement(["reject", "accept"]),
            operation: faker_1.faker.helpers.arrayElement(["sendEvmTransaction"]),
            criteria: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.arrayElement([
                { ...(0, exports.getCreatePolicyResponseEthValueCriterionMock)() },
                { ...(0, exports.getCreatePolicyResponseEvmAddressCriterionMock)() },
                { ...(0, exports.getCreatePolicyResponseEvmNetworkCriterionMock)() },
                { ...(0, exports.getCreatePolicyResponseEvmDataCriterionMock)() },
                { ...(0, exports.getCreatePolicyResponseNetUSDChangeCriterionMock)() },
            ])),
        },
        {
            action: faker_1.faker.helpers.arrayElement(["reject", "accept"]),
            operation: faker_1.faker.helpers.arrayElement(["signEvmMessage"]),
            criteria: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.arrayElement([{ ...(0, exports.getCreatePolicyResponseEvmMessageCriterionMock)() }])),
        },
        {
            action: faker_1.faker.helpers.arrayElement(["reject", "accept"]),
            operation: faker_1.faker.helpers.arrayElement(["signEvmTypedData"]),
            criteria: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.arrayElement([
                { ...(0, exports.getCreatePolicyResponseSignEvmTypedDataFieldCriterionMock)() },
                { ...(0, exports.getCreatePolicyResponseSignEvmTypedDataVerifyingContractCriterionMock)() },
            ])),
        },
        {
            action: faker_1.faker.helpers.arrayElement(["reject", "accept"]),
            operation: faker_1.faker.helpers.arrayElement(["signSolTransaction"]),
            criteria: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.arrayElement([
                { ...(0, exports.getCreatePolicyResponseSolAddressCriterionMock)() },
                { ...(0, exports.getCreatePolicyResponseSolValueCriterionMock)() },
                { ...(0, exports.getCreatePolicyResponseSplAddressCriterionMock)() },
                { ...(0, exports.getCreatePolicyResponseSplValueCriterionMock)() },
                { ...(0, exports.getCreatePolicyResponseMintAddressCriterionMock)() },
            ])),
        },
        {
            action: faker_1.faker.helpers.arrayElement(["reject", "accept"]),
            operation: faker_1.faker.helpers.arrayElement(["sendSolTransaction"]),
            criteria: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.arrayElement([
                { ...(0, exports.getCreatePolicyResponseSolAddressCriterionMock)() },
                { ...(0, exports.getCreatePolicyResponseSolValueCriterionMock)() },
                { ...(0, exports.getCreatePolicyResponseSplAddressCriterionMock)() },
                { ...(0, exports.getCreatePolicyResponseSplValueCriterionMock)() },
                { ...(0, exports.getCreatePolicyResponseMintAddressCriterionMock)() },
            ])),
        },
        {
            action: faker_1.faker.helpers.arrayElement(["reject", "accept"]),
            operation: faker_1.faker.helpers.arrayElement(["signEvmHash"]),
        },
        {
            action: faker_1.faker.helpers.arrayElement(["reject", "accept"]),
            operation: faker_1.faker.helpers.arrayElement(["prepareUserOperation"]),
            criteria: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.arrayElement([
                { ...(0, exports.getCreatePolicyResponseEthValueCriterionMock)() },
                { ...(0, exports.getCreatePolicyResponseEvmAddressCriterionMock)() },
                { ...(0, exports.getCreatePolicyResponseEvmNetworkCriterionMock)() },
                { ...(0, exports.getCreatePolicyResponseEvmDataCriterionMock)() },
            ])),
        },
        {
            action: faker_1.faker.helpers.arrayElement(["reject", "accept"]),
            operation: faker_1.faker.helpers.arrayElement(["sendUserOperation"]),
            criteria: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.arrayElement([
                { ...(0, exports.getCreatePolicyResponseEthValueCriterionMock)() },
                { ...(0, exports.getCreatePolicyResponseEvmAddressCriterionMock)() },
                { ...(0, exports.getCreatePolicyResponseEvmDataCriterionMock)() },
            ])),
        },
    ])),
    createdAt: faker_1.faker.string.alpha(20),
    updatedAt: faker_1.faker.string.alpha(20),
    ...overrideResponse,
});
exports.getCreatePolicyResponseMock = getCreatePolicyResponseMock;
const getGetPolicyByIdResponseEthValueCriterionMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement(["ethValue"]),
        ethValue: faker_1.faker.helpers.fromRegExp("^[0-9]+$"),
        operator: faker_1.faker.helpers.arrayElement([">", ">=", "<", "<=", "=="]),
    },
    ...overrideResponse,
});
exports.getGetPolicyByIdResponseEthValueCriterionMock = getGetPolicyByIdResponseEthValueCriterionMock;
const getGetPolicyByIdResponseEvmAddressCriterionMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement(["evmAddress"]),
        addresses: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]{40}$")),
        operator: faker_1.faker.helpers.arrayElement(["in", "not in"]),
    },
    ...overrideResponse,
});
exports.getGetPolicyByIdResponseEvmAddressCriterionMock = getGetPolicyByIdResponseEvmAddressCriterionMock;
const getGetPolicyByIdResponseAbiFunctionMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement(["function"]),
        name: faker_1.faker.string.alpha(20),
        inputs: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
            name: faker_1.faker.helpers.arrayElement([faker_1.faker.string.alpha(20), undefined]),
            type: faker_1.faker.string.alpha(20),
            internalType: faker_1.faker.helpers.arrayElement([faker_1.faker.string.alpha(20), undefined]),
            components: faker_1.faker.helpers.arrayElement([[], undefined]),
        })),
        outputs: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
            name: faker_1.faker.helpers.arrayElement([faker_1.faker.string.alpha(20), undefined]),
            type: faker_1.faker.string.alpha(20),
            internalType: faker_1.faker.helpers.arrayElement([faker_1.faker.string.alpha(20), undefined]),
            components: faker_1.faker.helpers.arrayElement([[], undefined]),
        })),
        constant: faker_1.faker.helpers.arrayElement([faker_1.faker.datatype.boolean(), undefined]),
        payable: faker_1.faker.helpers.arrayElement([faker_1.faker.datatype.boolean(), undefined]),
        stateMutability: faker_1.faker.helpers.arrayElement(Object.values(coinbaseDeveloperPlatformAPIs_schemas_js_1.AbiStateMutability)),
        gas: faker_1.faker.helpers.arrayElement([
            faker_1.faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
    },
    ...overrideResponse,
});
exports.getGetPolicyByIdResponseAbiFunctionMock = getGetPolicyByIdResponseAbiFunctionMock;
const getGetPolicyByIdResponseAbiInputMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement([
            "constructor",
            "error",
            "event",
            "fallback",
            "receive",
        ]),
        additionalProperties: faker_1.faker.helpers.arrayElement([{}, undefined]),
    },
    ...overrideResponse,
});
exports.getGetPolicyByIdResponseAbiInputMock = getGetPolicyByIdResponseAbiInputMock;
const getGetPolicyByIdResponseEvmDataParameterConditionMock = (overrideResponse = {}) => ({
    ...{
        name: faker_1.faker.string.alpha(20),
        operator: faker_1.faker.helpers.arrayElement([">", ">=", "<", "<=", "=="]),
        value: faker_1.faker.string.alpha(20),
    },
    ...overrideResponse,
});
exports.getGetPolicyByIdResponseEvmDataParameterConditionMock = getGetPolicyByIdResponseEvmDataParameterConditionMock;
const getGetPolicyByIdResponseEvmDataParameterConditionListMock = (overrideResponse = {}) => ({
    ...{
        name: faker_1.faker.string.alpha(20),
        operator: faker_1.faker.helpers.arrayElement(["in", "not in"]),
        values: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.string.alpha(20)),
    },
    ...overrideResponse,
});
exports.getGetPolicyByIdResponseEvmDataParameterConditionListMock = getGetPolicyByIdResponseEvmDataParameterConditionListMock;
const getGetPolicyByIdResponseEvmDataCriterionMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement(["evmData"]),
        abi: faker_1.faker.helpers.arrayElement([
            faker_1.faker.helpers.arrayElement(Object.values(coinbaseDeveloperPlatformAPIs_schemas_js_1.KnownAbiType)),
            Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.arrayElement([
                { ...(0, exports.getGetPolicyByIdResponseAbiFunctionMock)() },
                { ...(0, exports.getGetPolicyByIdResponseAbiInputMock)() },
            ])),
        ]),
        conditions: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
            function: faker_1.faker.string.alpha(20),
            params: faker_1.faker.helpers.arrayElement([
                Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.arrayElement([
                    { ...(0, exports.getGetPolicyByIdResponseEvmDataParameterConditionMock)() },
                    { ...(0, exports.getGetPolicyByIdResponseEvmDataParameterConditionListMock)() },
                ])),
                undefined,
            ]),
        })),
    },
    ...overrideResponse,
});
exports.getGetPolicyByIdResponseEvmDataCriterionMock = getGetPolicyByIdResponseEvmDataCriterionMock;
const getGetPolicyByIdResponseNetUSDChangeCriterionMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement(["netUSDChange"]),
        changeCents: faker_1.faker.number.int({ min: undefined, max: undefined }),
        operator: faker_1.faker.helpers.arrayElement([">", ">=", "<", "<=", "=="]),
    },
    ...overrideResponse,
});
exports.getGetPolicyByIdResponseNetUSDChangeCriterionMock = getGetPolicyByIdResponseNetUSDChangeCriterionMock;
const getGetPolicyByIdResponseEvmNetworkCriterionMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement(["evmNetwork"]),
        networks: faker_1.faker.helpers.arrayElements([
            "base-sepolia",
            "base",
            "ethereum",
            "ethereum-sepolia",
            "avalanche",
            "polygon",
            "optimism",
            "arbitrum",
            "zora",
            "bnb",
        ]),
        operator: faker_1.faker.helpers.arrayElement(["in", "not in"]),
    },
    ...overrideResponse,
});
exports.getGetPolicyByIdResponseEvmNetworkCriterionMock = getGetPolicyByIdResponseEvmNetworkCriterionMock;
const getGetPolicyByIdResponseEvmMessageCriterionMock = (overrideResponse = {}) => ({
    ...{ type: faker_1.faker.helpers.arrayElement(["evmMessage"]), match: faker_1.faker.string.alpha(20) },
    ...overrideResponse,
});
exports.getGetPolicyByIdResponseEvmMessageCriterionMock = getGetPolicyByIdResponseEvmMessageCriterionMock;
const getGetPolicyByIdResponseEvmTypedAddressConditionMock = (overrideResponse = {}) => ({
    ...{
        addresses: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]{40}$")),
        operator: faker_1.faker.helpers.arrayElement(["in", "not in"]),
        path: faker_1.faker.string.alpha(20),
    },
    ...overrideResponse,
});
exports.getGetPolicyByIdResponseEvmTypedAddressConditionMock = getGetPolicyByIdResponseEvmTypedAddressConditionMock;
const getGetPolicyByIdResponseEvmTypedNumericalConditionMock = (overrideResponse = {}) => ({
    ...{
        value: faker_1.faker.helpers.fromRegExp("^[0-9]+$"),
        operator: faker_1.faker.helpers.arrayElement([">", ">=", "<", "<=", "=="]),
        path: faker_1.faker.string.alpha(20),
    },
    ...overrideResponse,
});
exports.getGetPolicyByIdResponseEvmTypedNumericalConditionMock = getGetPolicyByIdResponseEvmTypedNumericalConditionMock;
const getGetPolicyByIdResponseEvmTypedStringConditionMock = (overrideResponse = {}) => ({
    ...{ match: faker_1.faker.string.alpha(20), path: faker_1.faker.string.alpha(20) },
    ...overrideResponse,
});
exports.getGetPolicyByIdResponseEvmTypedStringConditionMock = getGetPolicyByIdResponseEvmTypedStringConditionMock;
const getGetPolicyByIdResponseSignEvmTypedDataFieldCriterionMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement(["evmTypedDataField"]),
        types: {
            types: {
                [faker_1.faker.string.alphanumeric(5)]: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                    name: faker_1.faker.helpers.arrayElement([faker_1.faker.string.alpha(20), undefined]),
                    type: faker_1.faker.helpers.arrayElement([faker_1.faker.string.alpha(20), undefined]),
                })),
            },
            primaryType: faker_1.faker.string.alpha(20),
        },
        conditions: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.arrayElement([
            { ...(0, exports.getGetPolicyByIdResponseEvmTypedAddressConditionMock)() },
            { ...(0, exports.getGetPolicyByIdResponseEvmTypedNumericalConditionMock)() },
            { ...(0, exports.getGetPolicyByIdResponseEvmTypedStringConditionMock)() },
        ])),
    },
    ...overrideResponse,
});
exports.getGetPolicyByIdResponseSignEvmTypedDataFieldCriterionMock = getGetPolicyByIdResponseSignEvmTypedDataFieldCriterionMock;
const getGetPolicyByIdResponseSignEvmTypedDataVerifyingContractCriterionMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement(["evmTypedDataVerifyingContract"]),
        addresses: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]{40}$")),
        operator: faker_1.faker.helpers.arrayElement(["in", "not in"]),
    },
    ...overrideResponse,
});
exports.getGetPolicyByIdResponseSignEvmTypedDataVerifyingContractCriterionMock = getGetPolicyByIdResponseSignEvmTypedDataVerifyingContractCriterionMock;
const getGetPolicyByIdResponseSolAddressCriterionMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement(["solAddress"]),
        addresses: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.fromRegExp("^[1-9A-HJ-NP-Za-km-z]{32,44}$")),
        operator: faker_1.faker.helpers.arrayElement(["in", "not in"]),
    },
    ...overrideResponse,
});
exports.getGetPolicyByIdResponseSolAddressCriterionMock = getGetPolicyByIdResponseSolAddressCriterionMock;
const getGetPolicyByIdResponseSolValueCriterionMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement(["solValue"]),
        solValue: faker_1.faker.string.alpha(20),
        operator: faker_1.faker.helpers.arrayElement([">", ">=", "<", "<=", "=="]),
    },
    ...overrideResponse,
});
exports.getGetPolicyByIdResponseSolValueCriterionMock = getGetPolicyByIdResponseSolValueCriterionMock;
const getGetPolicyByIdResponseSplAddressCriterionMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement(["splAddress"]),
        addresses: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.fromRegExp("^[1-9A-HJ-NP-Za-km-z]{32,44}$")),
        operator: faker_1.faker.helpers.arrayElement(["in", "not in"]),
    },
    ...overrideResponse,
});
exports.getGetPolicyByIdResponseSplAddressCriterionMock = getGetPolicyByIdResponseSplAddressCriterionMock;
const getGetPolicyByIdResponseSplValueCriterionMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement(["splValue"]),
        splValue: faker_1.faker.string.alpha(20),
        operator: faker_1.faker.helpers.arrayElement([">", ">=", "<", "<=", "=="]),
    },
    ...overrideResponse,
});
exports.getGetPolicyByIdResponseSplValueCriterionMock = getGetPolicyByIdResponseSplValueCriterionMock;
const getGetPolicyByIdResponseMintAddressCriterionMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement(["mintAddress"]),
        addresses: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.fromRegExp("^[1-9A-HJ-NP-Za-km-z]{32,44}$")),
        operator: faker_1.faker.helpers.arrayElement(["in", "not in"]),
    },
    ...overrideResponse,
});
exports.getGetPolicyByIdResponseMintAddressCriterionMock = getGetPolicyByIdResponseMintAddressCriterionMock;
const getGetPolicyByIdResponseMock = (overrideResponse = {}) => ({
    id: faker_1.faker.helpers.fromRegExp("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"),
    description: faker_1.faker.helpers.arrayElement([
        faker_1.faker.helpers.fromRegExp("^[A-Za-z0-9 ,.]{1,50}$"),
        undefined,
    ]),
    scope: faker_1.faker.helpers.arrayElement(["project", "account"]),
    rules: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.arrayElement([
        {
            action: faker_1.faker.helpers.arrayElement(["reject", "accept"]),
            operation: faker_1.faker.helpers.arrayElement(["signEvmTransaction"]),
            criteria: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.arrayElement([
                { ...(0, exports.getGetPolicyByIdResponseEthValueCriterionMock)() },
                { ...(0, exports.getGetPolicyByIdResponseEvmAddressCriterionMock)() },
                { ...(0, exports.getGetPolicyByIdResponseEvmDataCriterionMock)() },
                { ...(0, exports.getGetPolicyByIdResponseNetUSDChangeCriterionMock)() },
            ])),
        },
        {
            action: faker_1.faker.helpers.arrayElement(["reject", "accept"]),
            operation: faker_1.faker.helpers.arrayElement(["sendEvmTransaction"]),
            criteria: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.arrayElement([
                { ...(0, exports.getGetPolicyByIdResponseEthValueCriterionMock)() },
                { ...(0, exports.getGetPolicyByIdResponseEvmAddressCriterionMock)() },
                { ...(0, exports.getGetPolicyByIdResponseEvmNetworkCriterionMock)() },
                { ...(0, exports.getGetPolicyByIdResponseEvmDataCriterionMock)() },
                { ...(0, exports.getGetPolicyByIdResponseNetUSDChangeCriterionMock)() },
            ])),
        },
        {
            action: faker_1.faker.helpers.arrayElement(["reject", "accept"]),
            operation: faker_1.faker.helpers.arrayElement(["signEvmMessage"]),
            criteria: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.arrayElement([{ ...(0, exports.getGetPolicyByIdResponseEvmMessageCriterionMock)() }])),
        },
        {
            action: faker_1.faker.helpers.arrayElement(["reject", "accept"]),
            operation: faker_1.faker.helpers.arrayElement(["signEvmTypedData"]),
            criteria: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.arrayElement([
                { ...(0, exports.getGetPolicyByIdResponseSignEvmTypedDataFieldCriterionMock)() },
                { ...(0, exports.getGetPolicyByIdResponseSignEvmTypedDataVerifyingContractCriterionMock)() },
            ])),
        },
        {
            action: faker_1.faker.helpers.arrayElement(["reject", "accept"]),
            operation: faker_1.faker.helpers.arrayElement(["signSolTransaction"]),
            criteria: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.arrayElement([
                { ...(0, exports.getGetPolicyByIdResponseSolAddressCriterionMock)() },
                { ...(0, exports.getGetPolicyByIdResponseSolValueCriterionMock)() },
                { ...(0, exports.getGetPolicyByIdResponseSplAddressCriterionMock)() },
                { ...(0, exports.getGetPolicyByIdResponseSplValueCriterionMock)() },
                { ...(0, exports.getGetPolicyByIdResponseMintAddressCriterionMock)() },
            ])),
        },
        {
            action: faker_1.faker.helpers.arrayElement(["reject", "accept"]),
            operation: faker_1.faker.helpers.arrayElement(["sendSolTransaction"]),
            criteria: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.arrayElement([
                { ...(0, exports.getGetPolicyByIdResponseSolAddressCriterionMock)() },
                { ...(0, exports.getGetPolicyByIdResponseSolValueCriterionMock)() },
                { ...(0, exports.getGetPolicyByIdResponseSplAddressCriterionMock)() },
                { ...(0, exports.getGetPolicyByIdResponseSplValueCriterionMock)() },
                { ...(0, exports.getGetPolicyByIdResponseMintAddressCriterionMock)() },
            ])),
        },
        {
            action: faker_1.faker.helpers.arrayElement(["reject", "accept"]),
            operation: faker_1.faker.helpers.arrayElement(["signEvmHash"]),
        },
        {
            action: faker_1.faker.helpers.arrayElement(["reject", "accept"]),
            operation: faker_1.faker.helpers.arrayElement(["prepareUserOperation"]),
            criteria: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.arrayElement([
                { ...(0, exports.getGetPolicyByIdResponseEthValueCriterionMock)() },
                { ...(0, exports.getGetPolicyByIdResponseEvmAddressCriterionMock)() },
                { ...(0, exports.getGetPolicyByIdResponseEvmNetworkCriterionMock)() },
                { ...(0, exports.getGetPolicyByIdResponseEvmDataCriterionMock)() },
            ])),
        },
        {
            action: faker_1.faker.helpers.arrayElement(["reject", "accept"]),
            operation: faker_1.faker.helpers.arrayElement(["sendUserOperation"]),
            criteria: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.arrayElement([
                { ...(0, exports.getGetPolicyByIdResponseEthValueCriterionMock)() },
                { ...(0, exports.getGetPolicyByIdResponseEvmAddressCriterionMock)() },
                { ...(0, exports.getGetPolicyByIdResponseEvmDataCriterionMock)() },
            ])),
        },
    ])),
    createdAt: faker_1.faker.string.alpha(20),
    updatedAt: faker_1.faker.string.alpha(20),
    ...overrideResponse,
});
exports.getGetPolicyByIdResponseMock = getGetPolicyByIdResponseMock;
const getUpdatePolicyResponseEthValueCriterionMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement(["ethValue"]),
        ethValue: faker_1.faker.helpers.fromRegExp("^[0-9]+$"),
        operator: faker_1.faker.helpers.arrayElement([">", ">=", "<", "<=", "=="]),
    },
    ...overrideResponse,
});
exports.getUpdatePolicyResponseEthValueCriterionMock = getUpdatePolicyResponseEthValueCriterionMock;
const getUpdatePolicyResponseEvmAddressCriterionMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement(["evmAddress"]),
        addresses: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]{40}$")),
        operator: faker_1.faker.helpers.arrayElement(["in", "not in"]),
    },
    ...overrideResponse,
});
exports.getUpdatePolicyResponseEvmAddressCriterionMock = getUpdatePolicyResponseEvmAddressCriterionMock;
const getUpdatePolicyResponseAbiFunctionMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement(["function"]),
        name: faker_1.faker.string.alpha(20),
        inputs: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
            name: faker_1.faker.helpers.arrayElement([faker_1.faker.string.alpha(20), undefined]),
            type: faker_1.faker.string.alpha(20),
            internalType: faker_1.faker.helpers.arrayElement([faker_1.faker.string.alpha(20), undefined]),
            components: faker_1.faker.helpers.arrayElement([[], undefined]),
        })),
        outputs: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
            name: faker_1.faker.helpers.arrayElement([faker_1.faker.string.alpha(20), undefined]),
            type: faker_1.faker.string.alpha(20),
            internalType: faker_1.faker.helpers.arrayElement([faker_1.faker.string.alpha(20), undefined]),
            components: faker_1.faker.helpers.arrayElement([[], undefined]),
        })),
        constant: faker_1.faker.helpers.arrayElement([faker_1.faker.datatype.boolean(), undefined]),
        payable: faker_1.faker.helpers.arrayElement([faker_1.faker.datatype.boolean(), undefined]),
        stateMutability: faker_1.faker.helpers.arrayElement(Object.values(coinbaseDeveloperPlatformAPIs_schemas_js_1.AbiStateMutability)),
        gas: faker_1.faker.helpers.arrayElement([
            faker_1.faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
    },
    ...overrideResponse,
});
exports.getUpdatePolicyResponseAbiFunctionMock = getUpdatePolicyResponseAbiFunctionMock;
const getUpdatePolicyResponseAbiInputMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement([
            "constructor",
            "error",
            "event",
            "fallback",
            "receive",
        ]),
        additionalProperties: faker_1.faker.helpers.arrayElement([{}, undefined]),
    },
    ...overrideResponse,
});
exports.getUpdatePolicyResponseAbiInputMock = getUpdatePolicyResponseAbiInputMock;
const getUpdatePolicyResponseEvmDataParameterConditionMock = (overrideResponse = {}) => ({
    ...{
        name: faker_1.faker.string.alpha(20),
        operator: faker_1.faker.helpers.arrayElement([">", ">=", "<", "<=", "=="]),
        value: faker_1.faker.string.alpha(20),
    },
    ...overrideResponse,
});
exports.getUpdatePolicyResponseEvmDataParameterConditionMock = getUpdatePolicyResponseEvmDataParameterConditionMock;
const getUpdatePolicyResponseEvmDataParameterConditionListMock = (overrideResponse = {}) => ({
    ...{
        name: faker_1.faker.string.alpha(20),
        operator: faker_1.faker.helpers.arrayElement(["in", "not in"]),
        values: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.string.alpha(20)),
    },
    ...overrideResponse,
});
exports.getUpdatePolicyResponseEvmDataParameterConditionListMock = getUpdatePolicyResponseEvmDataParameterConditionListMock;
const getUpdatePolicyResponseEvmDataCriterionMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement(["evmData"]),
        abi: faker_1.faker.helpers.arrayElement([
            faker_1.faker.helpers.arrayElement(Object.values(coinbaseDeveloperPlatformAPIs_schemas_js_1.KnownAbiType)),
            Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.arrayElement([
                { ...(0, exports.getUpdatePolicyResponseAbiFunctionMock)() },
                { ...(0, exports.getUpdatePolicyResponseAbiInputMock)() },
            ])),
        ]),
        conditions: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
            function: faker_1.faker.string.alpha(20),
            params: faker_1.faker.helpers.arrayElement([
                Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.arrayElement([
                    { ...(0, exports.getUpdatePolicyResponseEvmDataParameterConditionMock)() },
                    { ...(0, exports.getUpdatePolicyResponseEvmDataParameterConditionListMock)() },
                ])),
                undefined,
            ]),
        })),
    },
    ...overrideResponse,
});
exports.getUpdatePolicyResponseEvmDataCriterionMock = getUpdatePolicyResponseEvmDataCriterionMock;
const getUpdatePolicyResponseNetUSDChangeCriterionMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement(["netUSDChange"]),
        changeCents: faker_1.faker.number.int({ min: undefined, max: undefined }),
        operator: faker_1.faker.helpers.arrayElement([">", ">=", "<", "<=", "=="]),
    },
    ...overrideResponse,
});
exports.getUpdatePolicyResponseNetUSDChangeCriterionMock = getUpdatePolicyResponseNetUSDChangeCriterionMock;
const getUpdatePolicyResponseEvmNetworkCriterionMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement(["evmNetwork"]),
        networks: faker_1.faker.helpers.arrayElements([
            "base-sepolia",
            "base",
            "ethereum",
            "ethereum-sepolia",
            "avalanche",
            "polygon",
            "optimism",
            "arbitrum",
            "zora",
            "bnb",
        ]),
        operator: faker_1.faker.helpers.arrayElement(["in", "not in"]),
    },
    ...overrideResponse,
});
exports.getUpdatePolicyResponseEvmNetworkCriterionMock = getUpdatePolicyResponseEvmNetworkCriterionMock;
const getUpdatePolicyResponseEvmMessageCriterionMock = (overrideResponse = {}) => ({
    ...{ type: faker_1.faker.helpers.arrayElement(["evmMessage"]), match: faker_1.faker.string.alpha(20) },
    ...overrideResponse,
});
exports.getUpdatePolicyResponseEvmMessageCriterionMock = getUpdatePolicyResponseEvmMessageCriterionMock;
const getUpdatePolicyResponseEvmTypedAddressConditionMock = (overrideResponse = {}) => ({
    ...{
        addresses: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]{40}$")),
        operator: faker_1.faker.helpers.arrayElement(["in", "not in"]),
        path: faker_1.faker.string.alpha(20),
    },
    ...overrideResponse,
});
exports.getUpdatePolicyResponseEvmTypedAddressConditionMock = getUpdatePolicyResponseEvmTypedAddressConditionMock;
const getUpdatePolicyResponseEvmTypedNumericalConditionMock = (overrideResponse = {}) => ({
    ...{
        value: faker_1.faker.helpers.fromRegExp("^[0-9]+$"),
        operator: faker_1.faker.helpers.arrayElement([">", ">=", "<", "<=", "=="]),
        path: faker_1.faker.string.alpha(20),
    },
    ...overrideResponse,
});
exports.getUpdatePolicyResponseEvmTypedNumericalConditionMock = getUpdatePolicyResponseEvmTypedNumericalConditionMock;
const getUpdatePolicyResponseEvmTypedStringConditionMock = (overrideResponse = {}) => ({
    ...{ match: faker_1.faker.string.alpha(20), path: faker_1.faker.string.alpha(20) },
    ...overrideResponse,
});
exports.getUpdatePolicyResponseEvmTypedStringConditionMock = getUpdatePolicyResponseEvmTypedStringConditionMock;
const getUpdatePolicyResponseSignEvmTypedDataFieldCriterionMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement(["evmTypedDataField"]),
        types: {
            types: {
                [faker_1.faker.string.alphanumeric(5)]: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                    name: faker_1.faker.helpers.arrayElement([faker_1.faker.string.alpha(20), undefined]),
                    type: faker_1.faker.helpers.arrayElement([faker_1.faker.string.alpha(20), undefined]),
                })),
            },
            primaryType: faker_1.faker.string.alpha(20),
        },
        conditions: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.arrayElement([
            { ...(0, exports.getUpdatePolicyResponseEvmTypedAddressConditionMock)() },
            { ...(0, exports.getUpdatePolicyResponseEvmTypedNumericalConditionMock)() },
            { ...(0, exports.getUpdatePolicyResponseEvmTypedStringConditionMock)() },
        ])),
    },
    ...overrideResponse,
});
exports.getUpdatePolicyResponseSignEvmTypedDataFieldCriterionMock = getUpdatePolicyResponseSignEvmTypedDataFieldCriterionMock;
const getUpdatePolicyResponseSignEvmTypedDataVerifyingContractCriterionMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement(["evmTypedDataVerifyingContract"]),
        addresses: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]{40}$")),
        operator: faker_1.faker.helpers.arrayElement(["in", "not in"]),
    },
    ...overrideResponse,
});
exports.getUpdatePolicyResponseSignEvmTypedDataVerifyingContractCriterionMock = getUpdatePolicyResponseSignEvmTypedDataVerifyingContractCriterionMock;
const getUpdatePolicyResponseSolAddressCriterionMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement(["solAddress"]),
        addresses: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.fromRegExp("^[1-9A-HJ-NP-Za-km-z]{32,44}$")),
        operator: faker_1.faker.helpers.arrayElement(["in", "not in"]),
    },
    ...overrideResponse,
});
exports.getUpdatePolicyResponseSolAddressCriterionMock = getUpdatePolicyResponseSolAddressCriterionMock;
const getUpdatePolicyResponseSolValueCriterionMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement(["solValue"]),
        solValue: faker_1.faker.string.alpha(20),
        operator: faker_1.faker.helpers.arrayElement([">", ">=", "<", "<=", "=="]),
    },
    ...overrideResponse,
});
exports.getUpdatePolicyResponseSolValueCriterionMock = getUpdatePolicyResponseSolValueCriterionMock;
const getUpdatePolicyResponseSplAddressCriterionMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement(["splAddress"]),
        addresses: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.fromRegExp("^[1-9A-HJ-NP-Za-km-z]{32,44}$")),
        operator: faker_1.faker.helpers.arrayElement(["in", "not in"]),
    },
    ...overrideResponse,
});
exports.getUpdatePolicyResponseSplAddressCriterionMock = getUpdatePolicyResponseSplAddressCriterionMock;
const getUpdatePolicyResponseSplValueCriterionMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement(["splValue"]),
        splValue: faker_1.faker.string.alpha(20),
        operator: faker_1.faker.helpers.arrayElement([">", ">=", "<", "<=", "=="]),
    },
    ...overrideResponse,
});
exports.getUpdatePolicyResponseSplValueCriterionMock = getUpdatePolicyResponseSplValueCriterionMock;
const getUpdatePolicyResponseMintAddressCriterionMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement(["mintAddress"]),
        addresses: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.fromRegExp("^[1-9A-HJ-NP-Za-km-z]{32,44}$")),
        operator: faker_1.faker.helpers.arrayElement(["in", "not in"]),
    },
    ...overrideResponse,
});
exports.getUpdatePolicyResponseMintAddressCriterionMock = getUpdatePolicyResponseMintAddressCriterionMock;
const getUpdatePolicyResponseMock = (overrideResponse = {}) => ({
    id: faker_1.faker.helpers.fromRegExp("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"),
    description: faker_1.faker.helpers.arrayElement([
        faker_1.faker.helpers.fromRegExp("^[A-Za-z0-9 ,.]{1,50}$"),
        undefined,
    ]),
    scope: faker_1.faker.helpers.arrayElement(["project", "account"]),
    rules: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.arrayElement([
        {
            action: faker_1.faker.helpers.arrayElement(["reject", "accept"]),
            operation: faker_1.faker.helpers.arrayElement(["signEvmTransaction"]),
            criteria: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.arrayElement([
                { ...(0, exports.getUpdatePolicyResponseEthValueCriterionMock)() },
                { ...(0, exports.getUpdatePolicyResponseEvmAddressCriterionMock)() },
                { ...(0, exports.getUpdatePolicyResponseEvmDataCriterionMock)() },
                { ...(0, exports.getUpdatePolicyResponseNetUSDChangeCriterionMock)() },
            ])),
        },
        {
            action: faker_1.faker.helpers.arrayElement(["reject", "accept"]),
            operation: faker_1.faker.helpers.arrayElement(["sendEvmTransaction"]),
            criteria: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.arrayElement([
                { ...(0, exports.getUpdatePolicyResponseEthValueCriterionMock)() },
                { ...(0, exports.getUpdatePolicyResponseEvmAddressCriterionMock)() },
                { ...(0, exports.getUpdatePolicyResponseEvmNetworkCriterionMock)() },
                { ...(0, exports.getUpdatePolicyResponseEvmDataCriterionMock)() },
                { ...(0, exports.getUpdatePolicyResponseNetUSDChangeCriterionMock)() },
            ])),
        },
        {
            action: faker_1.faker.helpers.arrayElement(["reject", "accept"]),
            operation: faker_1.faker.helpers.arrayElement(["signEvmMessage"]),
            criteria: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.arrayElement([{ ...(0, exports.getUpdatePolicyResponseEvmMessageCriterionMock)() }])),
        },
        {
            action: faker_1.faker.helpers.arrayElement(["reject", "accept"]),
            operation: faker_1.faker.helpers.arrayElement(["signEvmTypedData"]),
            criteria: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.arrayElement([
                { ...(0, exports.getUpdatePolicyResponseSignEvmTypedDataFieldCriterionMock)() },
                { ...(0, exports.getUpdatePolicyResponseSignEvmTypedDataVerifyingContractCriterionMock)() },
            ])),
        },
        {
            action: faker_1.faker.helpers.arrayElement(["reject", "accept"]),
            operation: faker_1.faker.helpers.arrayElement(["signSolTransaction"]),
            criteria: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.arrayElement([
                { ...(0, exports.getUpdatePolicyResponseSolAddressCriterionMock)() },
                { ...(0, exports.getUpdatePolicyResponseSolValueCriterionMock)() },
                { ...(0, exports.getUpdatePolicyResponseSplAddressCriterionMock)() },
                { ...(0, exports.getUpdatePolicyResponseSplValueCriterionMock)() },
                { ...(0, exports.getUpdatePolicyResponseMintAddressCriterionMock)() },
            ])),
        },
        {
            action: faker_1.faker.helpers.arrayElement(["reject", "accept"]),
            operation: faker_1.faker.helpers.arrayElement(["sendSolTransaction"]),
            criteria: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.arrayElement([
                { ...(0, exports.getUpdatePolicyResponseSolAddressCriterionMock)() },
                { ...(0, exports.getUpdatePolicyResponseSolValueCriterionMock)() },
                { ...(0, exports.getUpdatePolicyResponseSplAddressCriterionMock)() },
                { ...(0, exports.getUpdatePolicyResponseSplValueCriterionMock)() },
                { ...(0, exports.getUpdatePolicyResponseMintAddressCriterionMock)() },
            ])),
        },
        {
            action: faker_1.faker.helpers.arrayElement(["reject", "accept"]),
            operation: faker_1.faker.helpers.arrayElement(["signEvmHash"]),
        },
        {
            action: faker_1.faker.helpers.arrayElement(["reject", "accept"]),
            operation: faker_1.faker.helpers.arrayElement(["prepareUserOperation"]),
            criteria: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.arrayElement([
                { ...(0, exports.getUpdatePolicyResponseEthValueCriterionMock)() },
                { ...(0, exports.getUpdatePolicyResponseEvmAddressCriterionMock)() },
                { ...(0, exports.getUpdatePolicyResponseEvmNetworkCriterionMock)() },
                { ...(0, exports.getUpdatePolicyResponseEvmDataCriterionMock)() },
            ])),
        },
        {
            action: faker_1.faker.helpers.arrayElement(["reject", "accept"]),
            operation: faker_1.faker.helpers.arrayElement(["sendUserOperation"]),
            criteria: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.arrayElement([
                { ...(0, exports.getUpdatePolicyResponseEthValueCriterionMock)() },
                { ...(0, exports.getUpdatePolicyResponseEvmAddressCriterionMock)() },
                { ...(0, exports.getUpdatePolicyResponseEvmDataCriterionMock)() },
            ])),
        },
    ])),
    createdAt: faker_1.faker.string.alpha(20),
    updatedAt: faker_1.faker.string.alpha(20),
    ...overrideResponse,
});
exports.getUpdatePolicyResponseMock = getUpdatePolicyResponseMock;
const getListPoliciesMockHandler = (overrideResponse) => {
    return msw_1.http.get("*/v2/policy-engine/policies", async (info) => {
        await (0, msw_1.delay)(0);
        return new msw_1.HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
            : (0, exports.getListPoliciesResponseMock)()), { status: 200, headers: { "Content-Type": "application/json" } });
    });
};
exports.getListPoliciesMockHandler = getListPoliciesMockHandler;
const getCreatePolicyMockHandler = (overrideResponse) => {
    return msw_1.http.post("*/v2/policy-engine/policies", async (info) => {
        await (0, msw_1.delay)(0);
        return new msw_1.HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
            : (0, exports.getCreatePolicyResponseMock)()), { status: 201, headers: { "Content-Type": "application/json" } });
    });
};
exports.getCreatePolicyMockHandler = getCreatePolicyMockHandler;
const getGetPolicyByIdMockHandler = (overrideResponse) => {
    return msw_1.http.get("*/v2/policy-engine/policies/:policyId", async (info) => {
        await (0, msw_1.delay)(0);
        return new msw_1.HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
            : (0, exports.getGetPolicyByIdResponseMock)()), { status: 200, headers: { "Content-Type": "application/json" } });
    });
};
exports.getGetPolicyByIdMockHandler = getGetPolicyByIdMockHandler;
const getDeletePolicyMockHandler = (overrideResponse) => {
    return msw_1.http.delete("*/v2/policy-engine/policies/:policyId", async (info) => {
        await (0, msw_1.delay)(0);
        if (typeof overrideResponse === "function") {
            await overrideResponse(info);
        }
        return new msw_1.HttpResponse(null, { status: 204 });
    });
};
exports.getDeletePolicyMockHandler = getDeletePolicyMockHandler;
const getUpdatePolicyMockHandler = (overrideResponse) => {
    return msw_1.http.put("*/v2/policy-engine/policies/:policyId", async (info) => {
        await (0, msw_1.delay)(0);
        return new msw_1.HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
            : (0, exports.getUpdatePolicyResponseMock)()), { status: 200, headers: { "Content-Type": "application/json" } });
    });
};
exports.getUpdatePolicyMockHandler = getUpdatePolicyMockHandler;
const getPolicyEngineMock = () => [
    (0, exports.getListPoliciesMockHandler)(),
    (0, exports.getCreatePolicyMockHandler)(),
    (0, exports.getGetPolicyByIdMockHandler)(),
    (0, exports.getDeletePolicyMockHandler)(),
    (0, exports.getUpdatePolicyMockHandler)(),
];
exports.getPolicyEngineMock = getPolicyEngineMock;
//# sourceMappingURL=policy-engine.msw.js.map