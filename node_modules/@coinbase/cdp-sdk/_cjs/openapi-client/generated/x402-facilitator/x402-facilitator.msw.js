"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getX402FacilitatorMock = exports.getSupportedX402PaymentKindsMockHandler = exports.getSettleX402PaymentMockHandler = exports.getVerifyX402PaymentMockHandler = exports.getSupportedX402PaymentKindsResponseMock = exports.getSettleX402PaymentResponseMock = exports.getVerifyX402PaymentResponseMock = void 0;
/**
 * Generated by orval v7.6.0 🍺
 * Do not edit manually.
 * Coinbase Developer Platform APIs
 * The Coinbase Developer Platform APIs - leading the world's transition onchain.
 * OpenAPI spec version: 2.0.0
 */
const faker_1 = require("@faker-js/faker");
const msw_1 = require("msw");
const coinbaseDeveloperPlatformAPIs_schemas_js_1 = require("../coinbaseDeveloperPlatformAPIs.schemas.js");
const getVerifyX402PaymentResponseMock = (overrideResponse = {}) => ({
    isValid: faker_1.faker.datatype.boolean(),
    invalidReason: faker_1.faker.helpers.arrayElement([
        faker_1.faker.helpers.arrayElement(Object.values(coinbaseDeveloperPlatformAPIs_schemas_js_1.X402VerifyInvalidReason)),
        undefined,
    ]),
    payer: faker_1.faker.helpers.fromRegExp("^0x[a-fA-F0-9]{40}|[A-Za-z0-9][A-Za-z0-9-]{0,34}[A-Za-z0-9]$"),
    ...overrideResponse,
});
exports.getVerifyX402PaymentResponseMock = getVerifyX402PaymentResponseMock;
const getSettleX402PaymentResponseMock = (overrideResponse = {}) => ({
    success: faker_1.faker.datatype.boolean(),
    errorReason: faker_1.faker.helpers.arrayElement([
        faker_1.faker.helpers.arrayElement(Object.values(coinbaseDeveloperPlatformAPIs_schemas_js_1.X402SettleErrorReason)),
        undefined,
    ]),
    payer: faker_1.faker.helpers.fromRegExp("^0x[a-fA-F0-9]{40}|[A-Za-z0-9][A-Za-z0-9-]{0,34}[A-Za-z0-9]$"),
    transaction: faker_1.faker.helpers.fromRegExp("^0x[a-fA-F0-9]{40}|[A-Za-z0-9][A-Za-z0-9-]{0,34}[A-Za-z0-9]$"),
    network: faker_1.faker.string.alpha(20),
    ...overrideResponse,
});
exports.getSettleX402PaymentResponseMock = getSettleX402PaymentResponseMock;
const getSupportedX402PaymentKindsResponseMock = (overrideResponse = {}) => ({
    kinds: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
        x402Version: faker_1.faker.helpers.arrayElement(Object.values(coinbaseDeveloperPlatformAPIs_schemas_js_1.X402Version)),
        scheme: faker_1.faker.helpers.arrayElement(["exact"]),
        network: faker_1.faker.helpers.arrayElement(["base-sepolia", "base"]),
    })),
    ...overrideResponse,
});
exports.getSupportedX402PaymentKindsResponseMock = getSupportedX402PaymentKindsResponseMock;
const getVerifyX402PaymentMockHandler = (overrideResponse) => {
    return msw_1.http.post("*/v2/x402/verify", async (info) => {
        await (0, msw_1.delay)(0);
        return new msw_1.HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
            : (0, exports.getVerifyX402PaymentResponseMock)()), { status: 200, headers: { "Content-Type": "application/json" } });
    });
};
exports.getVerifyX402PaymentMockHandler = getVerifyX402PaymentMockHandler;
const getSettleX402PaymentMockHandler = (overrideResponse) => {
    return msw_1.http.post("*/v2/x402/settle", async (info) => {
        await (0, msw_1.delay)(0);
        return new msw_1.HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
            : (0, exports.getSettleX402PaymentResponseMock)()), { status: 200, headers: { "Content-Type": "application/json" } });
    });
};
exports.getSettleX402PaymentMockHandler = getSettleX402PaymentMockHandler;
const getSupportedX402PaymentKindsMockHandler = (overrideResponse) => {
    return msw_1.http.get("*/v2/x402/supported", async (info) => {
        await (0, msw_1.delay)(0);
        return new msw_1.HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
            : (0, exports.getSupportedX402PaymentKindsResponseMock)()), { status: 200, headers: { "Content-Type": "application/json" } });
    });
};
exports.getSupportedX402PaymentKindsMockHandler = getSupportedX402PaymentKindsMockHandler;
const getX402FacilitatorMock = () => [
    (0, exports.getVerifyX402PaymentMockHandler)(),
    (0, exports.getSettleX402PaymentMockHandler)(),
    (0, exports.getSupportedX402PaymentKindsMockHandler)(),
];
exports.getX402FacilitatorMock = getX402FacilitatorMock;
//# sourceMappingURL=x402-facilitator.msw.js.map