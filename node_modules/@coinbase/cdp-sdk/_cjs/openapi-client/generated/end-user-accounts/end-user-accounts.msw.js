"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEndUserAccountsMock = exports.getValidateEndUserAccessTokenMockHandler = exports.getValidateEndUserAccessTokenResponseMock = exports.getValidateEndUserAccessTokenResponseDeveloperJWTAuthenticationMock = exports.getValidateEndUserAccessTokenResponseSmsAuthenticationMock = exports.getValidateEndUserAccessTokenResponseEmailAuthenticationMock = void 0;
/**
 * Generated by orval v7.6.0 🍺
 * Do not edit manually.
 * Coinbase Developer Platform APIs
 * The Coinbase Developer Platform APIs - leading the world's transition onchain.
 * OpenAPI spec version: 2.0.0
 */
const faker_1 = require("@faker-js/faker");
const msw_1 = require("msw");
const getValidateEndUserAccessTokenResponseEmailAuthenticationMock = (overrideResponse = {}) => ({
    ...{ type: faker_1.faker.helpers.arrayElement(["email"]), email: faker_1.faker.internet.email() },
    ...overrideResponse,
});
exports.getValidateEndUserAccessTokenResponseEmailAuthenticationMock = getValidateEndUserAccessTokenResponseEmailAuthenticationMock;
const getValidateEndUserAccessTokenResponseSmsAuthenticationMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement(["sms"]),
        phoneNumber: faker_1.faker.helpers.fromRegExp("^\+[1-9]\d{1,14}$"),
    },
    ...overrideResponse,
});
exports.getValidateEndUserAccessTokenResponseSmsAuthenticationMock = getValidateEndUserAccessTokenResponseSmsAuthenticationMock;
const getValidateEndUserAccessTokenResponseDeveloperJWTAuthenticationMock = (overrideResponse = {}) => ({
    ...{
        type: faker_1.faker.helpers.arrayElement(["jwt"]),
        kid: faker_1.faker.string.alpha(20),
        sub: faker_1.faker.string.alpha(20),
    },
    ...overrideResponse,
});
exports.getValidateEndUserAccessTokenResponseDeveloperJWTAuthenticationMock = getValidateEndUserAccessTokenResponseDeveloperJWTAuthenticationMock;
const getValidateEndUserAccessTokenResponseMock = (overrideResponse = {}) => ({
    userId: faker_1.faker.helpers.fromRegExp("^[a-zA-Z0-9-]{1,100}$"),
    authenticationMethods: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.arrayElement([
        { ...(0, exports.getValidateEndUserAccessTokenResponseEmailAuthenticationMock)() },
        { ...(0, exports.getValidateEndUserAccessTokenResponseSmsAuthenticationMock)() },
        { ...(0, exports.getValidateEndUserAccessTokenResponseDeveloperJWTAuthenticationMock)() },
    ])),
    evmAccounts: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]{40}$")),
    evmSmartAccounts: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]{40}$")),
    solanaAccounts: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.fromRegExp("^[1-9A-HJ-NP-Za-km-z]{32,44}$")),
    ...overrideResponse,
});
exports.getValidateEndUserAccessTokenResponseMock = getValidateEndUserAccessTokenResponseMock;
const getValidateEndUserAccessTokenMockHandler = (overrideResponse) => {
    return msw_1.http.post("*/v2/end-users/auth/validate-token", async (info) => {
        await (0, msw_1.delay)(0);
        return new msw_1.HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
            : (0, exports.getValidateEndUserAccessTokenResponseMock)()), { status: 200, headers: { "Content-Type": "application/json" } });
    });
};
exports.getValidateEndUserAccessTokenMockHandler = getValidateEndUserAccessTokenMockHandler;
const getEndUserAccountsMock = () => [(0, exports.getValidateEndUserAccessTokenMockHandler)()];
exports.getEndUserAccountsMock = getEndUserAccountsMock;
//# sourceMappingURL=end-user-accounts.msw.js.map