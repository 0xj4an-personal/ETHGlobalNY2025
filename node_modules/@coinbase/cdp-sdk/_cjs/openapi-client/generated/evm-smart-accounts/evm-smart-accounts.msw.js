"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEvmSmartAccountsMock = exports.getRevokeSpendPermissionMockHandler = exports.getListSpendPermissionsMockHandler = exports.getCreateSpendPermissionMockHandler = exports.getSendUserOperationMockHandler = exports.getGetUserOperationMockHandler = exports.getPrepareUserOperationMockHandler = exports.getUpdateEvmSmartAccountMockHandler = exports.getGetEvmSmartAccountMockHandler = exports.getGetEvmSmartAccountByNameMockHandler = exports.getCreateEvmSmartAccountMockHandler = exports.getListEvmSmartAccountsMockHandler = exports.getRevokeSpendPermissionResponseMock = exports.getListSpendPermissionsResponseMock = exports.getCreateSpendPermissionResponseMock = exports.getSendUserOperationResponseMock = exports.getGetUserOperationResponseMock = exports.getPrepareUserOperationResponseMock = exports.getUpdateEvmSmartAccountResponseMock = exports.getGetEvmSmartAccountResponseMock = exports.getGetEvmSmartAccountByNameResponseMock = exports.getCreateEvmSmartAccountResponseMock = exports.getListEvmSmartAccountsResponseMock = void 0;
/**
 * Generated by orval v7.6.0 🍺
 * Do not edit manually.
 * Coinbase Developer Platform APIs
 * The Coinbase Developer Platform APIs - leading the world's transition onchain.
 * OpenAPI spec version: 2.0.0
 */
const faker_1 = require("@faker-js/faker");
const msw_1 = require("msw");
const coinbaseDeveloperPlatformAPIs_schemas_js_1 = require("../coinbaseDeveloperPlatformAPIs.schemas.js");
const getListEvmSmartAccountsResponseMock = () => ({
    ...{
        accounts: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
            address: faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]{40}$"),
            owners: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]{40}$")),
            name: faker_1.faker.helpers.arrayElement([
                faker_1.faker.helpers.fromRegExp("^[A-Za-z0-9][A-Za-z0-9-]{0,34}[A-Za-z0-9]$"),
                undefined,
            ]),
            policies: faker_1.faker.helpers.arrayElement([
                Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.fromRegExp("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")),
                undefined,
            ]),
            createdAt: faker_1.faker.helpers.arrayElement([
                `${faker_1.faker.date.past().toISOString().split(".")[0]}Z`,
                undefined,
            ]),
            updatedAt: faker_1.faker.helpers.arrayElement([
                `${faker_1.faker.date.past().toISOString().split(".")[0]}Z`,
                undefined,
            ]),
        })),
    },
    ...{ nextPageToken: faker_1.faker.helpers.arrayElement([faker_1.faker.string.alpha(20), undefined]) },
});
exports.getListEvmSmartAccountsResponseMock = getListEvmSmartAccountsResponseMock;
const getCreateEvmSmartAccountResponseMock = (overrideResponse = {}) => ({
    address: faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]{40}$"),
    owners: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]{40}$")),
    name: faker_1.faker.helpers.arrayElement([
        faker_1.faker.helpers.fromRegExp("^[A-Za-z0-9][A-Za-z0-9-]{0,34}[A-Za-z0-9]$"),
        undefined,
    ]),
    policies: faker_1.faker.helpers.arrayElement([
        Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.fromRegExp("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")),
        undefined,
    ]),
    createdAt: faker_1.faker.helpers.arrayElement([
        `${faker_1.faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
    ]),
    updatedAt: faker_1.faker.helpers.arrayElement([
        `${faker_1.faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
    ]),
    ...overrideResponse,
});
exports.getCreateEvmSmartAccountResponseMock = getCreateEvmSmartAccountResponseMock;
const getGetEvmSmartAccountByNameResponseMock = (overrideResponse = {}) => ({
    address: faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]{40}$"),
    owners: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]{40}$")),
    name: faker_1.faker.helpers.arrayElement([
        faker_1.faker.helpers.fromRegExp("^[A-Za-z0-9][A-Za-z0-9-]{0,34}[A-Za-z0-9]$"),
        undefined,
    ]),
    policies: faker_1.faker.helpers.arrayElement([
        Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.fromRegExp("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")),
        undefined,
    ]),
    createdAt: faker_1.faker.helpers.arrayElement([
        `${faker_1.faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
    ]),
    updatedAt: faker_1.faker.helpers.arrayElement([
        `${faker_1.faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
    ]),
    ...overrideResponse,
});
exports.getGetEvmSmartAccountByNameResponseMock = getGetEvmSmartAccountByNameResponseMock;
const getGetEvmSmartAccountResponseMock = (overrideResponse = {}) => ({
    address: faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]{40}$"),
    owners: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]{40}$")),
    name: faker_1.faker.helpers.arrayElement([
        faker_1.faker.helpers.fromRegExp("^[A-Za-z0-9][A-Za-z0-9-]{0,34}[A-Za-z0-9]$"),
        undefined,
    ]),
    policies: faker_1.faker.helpers.arrayElement([
        Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.fromRegExp("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")),
        undefined,
    ]),
    createdAt: faker_1.faker.helpers.arrayElement([
        `${faker_1.faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
    ]),
    updatedAt: faker_1.faker.helpers.arrayElement([
        `${faker_1.faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
    ]),
    ...overrideResponse,
});
exports.getGetEvmSmartAccountResponseMock = getGetEvmSmartAccountResponseMock;
const getUpdateEvmSmartAccountResponseMock = (overrideResponse = {}) => ({
    address: faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]{40}$"),
    owners: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]{40}$")),
    name: faker_1.faker.helpers.arrayElement([
        faker_1.faker.helpers.fromRegExp("^[A-Za-z0-9][A-Za-z0-9-]{0,34}[A-Za-z0-9]$"),
        undefined,
    ]),
    policies: faker_1.faker.helpers.arrayElement([
        Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker_1.faker.helpers.fromRegExp("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")),
        undefined,
    ]),
    createdAt: faker_1.faker.helpers.arrayElement([
        `${faker_1.faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
    ]),
    updatedAt: faker_1.faker.helpers.arrayElement([
        `${faker_1.faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
    ]),
    ...overrideResponse,
});
exports.getUpdateEvmSmartAccountResponseMock = getUpdateEvmSmartAccountResponseMock;
const getPrepareUserOperationResponseMock = (overrideResponse = {}) => ({
    network: faker_1.faker.helpers.arrayElement(Object.values(coinbaseDeveloperPlatformAPIs_schemas_js_1.EvmUserOperationNetwork)),
    userOpHash: faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]{64}$"),
    calls: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
        to: faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]{40}$"),
        value: faker_1.faker.string.alpha(20),
        data: faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]*$"),
    })),
    status: faker_1.faker.helpers.arrayElement([
        "pending",
        "signed",
        "broadcast",
        "complete",
        "dropped",
        "failed",
    ]),
    transactionHash: faker_1.faker.helpers.arrayElement([
        faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]{64}$|^$"),
        undefined,
    ]),
    receipts: faker_1.faker.helpers.arrayElement([
        Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
            revert: faker_1.faker.helpers.arrayElement([
                { data: faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]*$"), message: faker_1.faker.string.alpha(20) },
                undefined,
            ]),
            transactionHash: faker_1.faker.helpers.arrayElement([
                faker_1.faker.helpers.fromRegExp("^0x[a-fA-F0-9]{64}$"),
                undefined,
            ]),
            blockHash: faker_1.faker.helpers.arrayElement([
                faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]{64}$|^$"),
                undefined,
            ]),
            blockNumber: faker_1.faker.helpers.arrayElement([
                faker_1.faker.number.int({ min: undefined, max: undefined }),
                undefined,
            ]),
            gasUsed: faker_1.faker.helpers.arrayElement([faker_1.faker.string.alpha(20), undefined]),
        })),
        undefined,
    ]),
    ...overrideResponse,
});
exports.getPrepareUserOperationResponseMock = getPrepareUserOperationResponseMock;
const getGetUserOperationResponseMock = (overrideResponse = {}) => ({
    network: faker_1.faker.helpers.arrayElement(Object.values(coinbaseDeveloperPlatformAPIs_schemas_js_1.EvmUserOperationNetwork)),
    userOpHash: faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]{64}$"),
    calls: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
        to: faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]{40}$"),
        value: faker_1.faker.string.alpha(20),
        data: faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]*$"),
    })),
    status: faker_1.faker.helpers.arrayElement([
        "pending",
        "signed",
        "broadcast",
        "complete",
        "dropped",
        "failed",
    ]),
    transactionHash: faker_1.faker.helpers.arrayElement([
        faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]{64}$|^$"),
        undefined,
    ]),
    receipts: faker_1.faker.helpers.arrayElement([
        Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
            revert: faker_1.faker.helpers.arrayElement([
                { data: faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]*$"), message: faker_1.faker.string.alpha(20) },
                undefined,
            ]),
            transactionHash: faker_1.faker.helpers.arrayElement([
                faker_1.faker.helpers.fromRegExp("^0x[a-fA-F0-9]{64}$"),
                undefined,
            ]),
            blockHash: faker_1.faker.helpers.arrayElement([
                faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]{64}$|^$"),
                undefined,
            ]),
            blockNumber: faker_1.faker.helpers.arrayElement([
                faker_1.faker.number.int({ min: undefined, max: undefined }),
                undefined,
            ]),
            gasUsed: faker_1.faker.helpers.arrayElement([faker_1.faker.string.alpha(20), undefined]),
        })),
        undefined,
    ]),
    ...overrideResponse,
});
exports.getGetUserOperationResponseMock = getGetUserOperationResponseMock;
const getSendUserOperationResponseMock = (overrideResponse = {}) => ({
    network: faker_1.faker.helpers.arrayElement(Object.values(coinbaseDeveloperPlatformAPIs_schemas_js_1.EvmUserOperationNetwork)),
    userOpHash: faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]{64}$"),
    calls: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
        to: faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]{40}$"),
        value: faker_1.faker.string.alpha(20),
        data: faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]*$"),
    })),
    status: faker_1.faker.helpers.arrayElement([
        "pending",
        "signed",
        "broadcast",
        "complete",
        "dropped",
        "failed",
    ]),
    transactionHash: faker_1.faker.helpers.arrayElement([
        faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]{64}$|^$"),
        undefined,
    ]),
    receipts: faker_1.faker.helpers.arrayElement([
        Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
            revert: faker_1.faker.helpers.arrayElement([
                { data: faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]*$"), message: faker_1.faker.string.alpha(20) },
                undefined,
            ]),
            transactionHash: faker_1.faker.helpers.arrayElement([
                faker_1.faker.helpers.fromRegExp("^0x[a-fA-F0-9]{64}$"),
                undefined,
            ]),
            blockHash: faker_1.faker.helpers.arrayElement([
                faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]{64}$|^$"),
                undefined,
            ]),
            blockNumber: faker_1.faker.helpers.arrayElement([
                faker_1.faker.number.int({ min: undefined, max: undefined }),
                undefined,
            ]),
            gasUsed: faker_1.faker.helpers.arrayElement([faker_1.faker.string.alpha(20), undefined]),
        })),
        undefined,
    ]),
    ...overrideResponse,
});
exports.getSendUserOperationResponseMock = getSendUserOperationResponseMock;
const getCreateSpendPermissionResponseMock = (overrideResponse = {}) => ({
    network: faker_1.faker.helpers.arrayElement(Object.values(coinbaseDeveloperPlatformAPIs_schemas_js_1.EvmUserOperationNetwork)),
    userOpHash: faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]{64}$"),
    calls: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
        to: faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]{40}$"),
        value: faker_1.faker.string.alpha(20),
        data: faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]*$"),
    })),
    status: faker_1.faker.helpers.arrayElement([
        "pending",
        "signed",
        "broadcast",
        "complete",
        "dropped",
        "failed",
    ]),
    transactionHash: faker_1.faker.helpers.arrayElement([
        faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]{64}$|^$"),
        undefined,
    ]),
    receipts: faker_1.faker.helpers.arrayElement([
        Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
            revert: faker_1.faker.helpers.arrayElement([
                { data: faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]*$"), message: faker_1.faker.string.alpha(20) },
                undefined,
            ]),
            transactionHash: faker_1.faker.helpers.arrayElement([
                faker_1.faker.helpers.fromRegExp("^0x[a-fA-F0-9]{64}$"),
                undefined,
            ]),
            blockHash: faker_1.faker.helpers.arrayElement([
                faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]{64}$|^$"),
                undefined,
            ]),
            blockNumber: faker_1.faker.helpers.arrayElement([
                faker_1.faker.number.int({ min: undefined, max: undefined }),
                undefined,
            ]),
            gasUsed: faker_1.faker.helpers.arrayElement([faker_1.faker.string.alpha(20), undefined]),
        })),
        undefined,
    ]),
    ...overrideResponse,
});
exports.getCreateSpendPermissionResponseMock = getCreateSpendPermissionResponseMock;
const getListSpendPermissionsResponseMock = () => ({
    ...{
        spendPermissions: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
            permission: {
                account: faker_1.faker.helpers.fromRegExp("^0x[a-fA-F0-9]{40}$"),
                spender: faker_1.faker.helpers.fromRegExp("^0x[a-fA-F0-9]{40}$"),
                token: faker_1.faker.helpers.fromRegExp("^0x[a-fA-F0-9]{40}$"),
                allowance: faker_1.faker.string.alpha(20),
                period: faker_1.faker.string.alpha(20),
                start: faker_1.faker.string.alpha(20),
                end: faker_1.faker.string.alpha(20),
                salt: faker_1.faker.string.alpha(20),
                extraData: faker_1.faker.string.alpha(20),
            },
            permissionHash: faker_1.faker.string.alpha(20),
            revoked: faker_1.faker.datatype.boolean(),
            revokedAt: faker_1.faker.helpers.arrayElement([
                `${faker_1.faker.date.past().toISOString().split(".")[0]}Z`,
                undefined,
            ]),
            createdAt: `${faker_1.faker.date.past().toISOString().split(".")[0]}Z`,
        })),
    },
    ...{ nextPageToken: faker_1.faker.helpers.arrayElement([faker_1.faker.string.alpha(20), undefined]) },
});
exports.getListSpendPermissionsResponseMock = getListSpendPermissionsResponseMock;
const getRevokeSpendPermissionResponseMock = (overrideResponse = {}) => ({
    network: faker_1.faker.helpers.arrayElement(Object.values(coinbaseDeveloperPlatformAPIs_schemas_js_1.EvmUserOperationNetwork)),
    userOpHash: faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]{64}$"),
    calls: Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
        to: faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]{40}$"),
        value: faker_1.faker.string.alpha(20),
        data: faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]*$"),
    })),
    status: faker_1.faker.helpers.arrayElement([
        "pending",
        "signed",
        "broadcast",
        "complete",
        "dropped",
        "failed",
    ]),
    transactionHash: faker_1.faker.helpers.arrayElement([
        faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]{64}$|^$"),
        undefined,
    ]),
    receipts: faker_1.faker.helpers.arrayElement([
        Array.from({ length: faker_1.faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
            revert: faker_1.faker.helpers.arrayElement([
                { data: faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]*$"), message: faker_1.faker.string.alpha(20) },
                undefined,
            ]),
            transactionHash: faker_1.faker.helpers.arrayElement([
                faker_1.faker.helpers.fromRegExp("^0x[a-fA-F0-9]{64}$"),
                undefined,
            ]),
            blockHash: faker_1.faker.helpers.arrayElement([
                faker_1.faker.helpers.fromRegExp("^0x[0-9a-fA-F]{64}$|^$"),
                undefined,
            ]),
            blockNumber: faker_1.faker.helpers.arrayElement([
                faker_1.faker.number.int({ min: undefined, max: undefined }),
                undefined,
            ]),
            gasUsed: faker_1.faker.helpers.arrayElement([faker_1.faker.string.alpha(20), undefined]),
        })),
        undefined,
    ]),
    ...overrideResponse,
});
exports.getRevokeSpendPermissionResponseMock = getRevokeSpendPermissionResponseMock;
const getListEvmSmartAccountsMockHandler = (overrideResponse) => {
    return msw_1.http.get("*/v2/evm/smart-accounts", async (info) => {
        await (0, msw_1.delay)(0);
        return new msw_1.HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
            : (0, exports.getListEvmSmartAccountsResponseMock)()), { status: 200, headers: { "Content-Type": "application/json" } });
    });
};
exports.getListEvmSmartAccountsMockHandler = getListEvmSmartAccountsMockHandler;
const getCreateEvmSmartAccountMockHandler = (overrideResponse) => {
    return msw_1.http.post("*/v2/evm/smart-accounts", async (info) => {
        await (0, msw_1.delay)(0);
        return new msw_1.HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
            : (0, exports.getCreateEvmSmartAccountResponseMock)()), { status: 201, headers: { "Content-Type": "application/json" } });
    });
};
exports.getCreateEvmSmartAccountMockHandler = getCreateEvmSmartAccountMockHandler;
const getGetEvmSmartAccountByNameMockHandler = (overrideResponse) => {
    return msw_1.http.get("*/v2/evm/smart-accounts/by-name/:name", async (info) => {
        await (0, msw_1.delay)(0);
        return new msw_1.HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
            : (0, exports.getGetEvmSmartAccountByNameResponseMock)()), { status: 200, headers: { "Content-Type": "application/json" } });
    });
};
exports.getGetEvmSmartAccountByNameMockHandler = getGetEvmSmartAccountByNameMockHandler;
const getGetEvmSmartAccountMockHandler = (overrideResponse) => {
    return msw_1.http.get("*/v2/evm/smart-accounts/:address", async (info) => {
        await (0, msw_1.delay)(0);
        return new msw_1.HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
            : (0, exports.getGetEvmSmartAccountResponseMock)()), { status: 200, headers: { "Content-Type": "application/json" } });
    });
};
exports.getGetEvmSmartAccountMockHandler = getGetEvmSmartAccountMockHandler;
const getUpdateEvmSmartAccountMockHandler = (overrideResponse) => {
    return msw_1.http.put("*/v2/evm/smart-accounts/:address", async (info) => {
        await (0, msw_1.delay)(0);
        return new msw_1.HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
            : (0, exports.getUpdateEvmSmartAccountResponseMock)()), { status: 200, headers: { "Content-Type": "application/json" } });
    });
};
exports.getUpdateEvmSmartAccountMockHandler = getUpdateEvmSmartAccountMockHandler;
const getPrepareUserOperationMockHandler = (overrideResponse) => {
    return msw_1.http.post("*/v2/evm/smart-accounts/:address/user-operations", async (info) => {
        await (0, msw_1.delay)(0);
        return new msw_1.HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
            : (0, exports.getPrepareUserOperationResponseMock)()), { status: 201, headers: { "Content-Type": "application/json" } });
    });
};
exports.getPrepareUserOperationMockHandler = getPrepareUserOperationMockHandler;
const getGetUserOperationMockHandler = (overrideResponse) => {
    return msw_1.http.get("*/v2/evm/smart-accounts/:address/user-operations/:userOpHash", async (info) => {
        await (0, msw_1.delay)(0);
        return new msw_1.HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
            : (0, exports.getGetUserOperationResponseMock)()), { status: 200, headers: { "Content-Type": "application/json" } });
    });
};
exports.getGetUserOperationMockHandler = getGetUserOperationMockHandler;
const getSendUserOperationMockHandler = (overrideResponse) => {
    return msw_1.http.post("*/v2/evm/smart-accounts/:address/user-operations/:userOpHash/send", async (info) => {
        await (0, msw_1.delay)(0);
        return new msw_1.HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
            : (0, exports.getSendUserOperationResponseMock)()), { status: 200, headers: { "Content-Type": "application/json" } });
    });
};
exports.getSendUserOperationMockHandler = getSendUserOperationMockHandler;
const getCreateSpendPermissionMockHandler = (overrideResponse) => {
    return msw_1.http.post("*/v2/evm/smart-accounts/:address/spend-permissions", async (info) => {
        await (0, msw_1.delay)(0);
        return new msw_1.HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
            : (0, exports.getCreateSpendPermissionResponseMock)()), { status: 200, headers: { "Content-Type": "application/json" } });
    });
};
exports.getCreateSpendPermissionMockHandler = getCreateSpendPermissionMockHandler;
const getListSpendPermissionsMockHandler = (overrideResponse) => {
    return msw_1.http.get("*/v2/evm/smart-accounts/:address/spend-permissions/list", async (info) => {
        await (0, msw_1.delay)(0);
        return new msw_1.HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
            : (0, exports.getListSpendPermissionsResponseMock)()), { status: 200, headers: { "Content-Type": "application/json" } });
    });
};
exports.getListSpendPermissionsMockHandler = getListSpendPermissionsMockHandler;
const getRevokeSpendPermissionMockHandler = (overrideResponse) => {
    return msw_1.http.post("*/v2/evm/smart-accounts/:address/spend-permissions/revoke", async (info) => {
        await (0, msw_1.delay)(0);
        return new msw_1.HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
            : (0, exports.getRevokeSpendPermissionResponseMock)()), { status: 200, headers: { "Content-Type": "application/json" } });
    });
};
exports.getRevokeSpendPermissionMockHandler = getRevokeSpendPermissionMockHandler;
const getEvmSmartAccountsMock = () => [
    (0, exports.getListEvmSmartAccountsMockHandler)(),
    (0, exports.getCreateEvmSmartAccountMockHandler)(),
    (0, exports.getGetEvmSmartAccountByNameMockHandler)(),
    (0, exports.getGetEvmSmartAccountMockHandler)(),
    (0, exports.getUpdateEvmSmartAccountMockHandler)(),
    (0, exports.getPrepareUserOperationMockHandler)(),
    (0, exports.getGetUserOperationMockHandler)(),
    (0, exports.getSendUserOperationMockHandler)(),
    (0, exports.getCreateSpendPermissionMockHandler)(),
    (0, exports.getListSpendPermissionsMockHandler)(),
    (0, exports.getRevokeSpendPermissionMockHandler)(),
];
exports.getEvmSmartAccountsMock = getEvmSmartAccountsMock;
//# sourceMappingURL=evm-smart-accounts.msw.js.map