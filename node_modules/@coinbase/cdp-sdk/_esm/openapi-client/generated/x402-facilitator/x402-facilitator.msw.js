/**
 * Generated by orval v7.6.0 🍺
 * Do not edit manually.
 * Coinbase Developer Platform APIs
 * The Coinbase Developer Platform APIs - leading the world's transition onchain.
 * OpenAPI spec version: 2.0.0
 */
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";
import { X402SettleErrorReason, X402VerifyInvalidReason, X402Version, } from "../coinbaseDeveloperPlatformAPIs.schemas.js";
export const getVerifyX402PaymentResponseMock = (overrideResponse = {}) => ({
    isValid: faker.datatype.boolean(),
    invalidReason: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(X402VerifyInvalidReason)),
        undefined,
    ]),
    payer: faker.helpers.fromRegExp("^0x[a-fA-F0-9]{40}|[A-Za-z0-9][A-Za-z0-9-]{0,34}[A-Za-z0-9]$"),
    ...overrideResponse,
});
export const getSettleX402PaymentResponseMock = (overrideResponse = {}) => ({
    success: faker.datatype.boolean(),
    errorReason: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(X402SettleErrorReason)),
        undefined,
    ]),
    payer: faker.helpers.fromRegExp("^0x[a-fA-F0-9]{40}|[A-Za-z0-9][A-Za-z0-9-]{0,34}[A-Za-z0-9]$"),
    transaction: faker.helpers.fromRegExp("^0x[a-fA-F0-9]{40}|[A-Za-z0-9][A-Za-z0-9-]{0,34}[A-Za-z0-9]$"),
    network: faker.string.alpha(20),
    ...overrideResponse,
});
export const getSupportedX402PaymentKindsResponseMock = (overrideResponse = {}) => ({
    kinds: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
        x402Version: faker.helpers.arrayElement(Object.values(X402Version)),
        scheme: faker.helpers.arrayElement(["exact"]),
        network: faker.helpers.arrayElement(["base-sepolia", "base"]),
    })),
    ...overrideResponse,
});
export const getVerifyX402PaymentMockHandler = (overrideResponse) => {
    return http.post("*/v2/x402/verify", async (info) => {
        await delay(0);
        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
            : getVerifyX402PaymentResponseMock()), { status: 200, headers: { "Content-Type": "application/json" } });
    });
};
export const getSettleX402PaymentMockHandler = (overrideResponse) => {
    return http.post("*/v2/x402/settle", async (info) => {
        await delay(0);
        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
            : getSettleX402PaymentResponseMock()), { status: 200, headers: { "Content-Type": "application/json" } });
    });
};
export const getSupportedX402PaymentKindsMockHandler = (overrideResponse) => {
    return http.get("*/v2/x402/supported", async (info) => {
        await delay(0);
        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
            : getSupportedX402PaymentKindsResponseMock()), { status: 200, headers: { "Content-Type": "application/json" } });
    });
};
export const getX402FacilitatorMock = () => [
    getVerifyX402PaymentMockHandler(),
    getSettleX402PaymentMockHandler(),
    getSupportedX402PaymentKindsMockHandler(),
];
//# sourceMappingURL=x402-facilitator.msw.js.map