/**
 * Generated by orval v7.6.0 🍺
 * Do not edit manually.
 * Coinbase Developer Platform APIs
 * The Coinbase Developer Platform APIs - leading the world's transition onchain.
 * OpenAPI spec version: 2.0.0
 */
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";
export const getValidateEndUserAccessTokenResponseEmailAuthenticationMock = (overrideResponse = {}) => ({
    ...{ type: faker.helpers.arrayElement(["email"]), email: faker.internet.email() },
    ...overrideResponse,
});
export const getValidateEndUserAccessTokenResponseSmsAuthenticationMock = (overrideResponse = {}) => ({
    ...{
        type: faker.helpers.arrayElement(["sms"]),
        phoneNumber: faker.helpers.fromRegExp("^\+[1-9]\d{1,14}$"),
    },
    ...overrideResponse,
});
export const getValidateEndUserAccessTokenResponseDeveloperJWTAuthenticationMock = (overrideResponse = {}) => ({
    ...{
        type: faker.helpers.arrayElement(["jwt"]),
        kid: faker.string.alpha(20),
        sub: faker.string.alpha(20),
    },
    ...overrideResponse,
});
export const getValidateEndUserAccessTokenResponseMock = (overrideResponse = {}) => ({
    userId: faker.helpers.fromRegExp("^[a-zA-Z0-9-]{1,100}$"),
    authenticationMethods: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker.helpers.arrayElement([
        { ...getValidateEndUserAccessTokenResponseEmailAuthenticationMock() },
        { ...getValidateEndUserAccessTokenResponseSmsAuthenticationMock() },
        { ...getValidateEndUserAccessTokenResponseDeveloperJWTAuthenticationMock() },
    ])),
    evmAccounts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker.helpers.fromRegExp("^0x[0-9a-fA-F]{40}$")),
    evmSmartAccounts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker.helpers.fromRegExp("^0x[0-9a-fA-F]{40}$")),
    solanaAccounts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => faker.helpers.fromRegExp("^[1-9A-HJ-NP-Za-km-z]{32,44}$")),
    ...overrideResponse,
});
export const getValidateEndUserAccessTokenMockHandler = (overrideResponse) => {
    return http.post("*/v2/end-users/auth/validate-token", async (info) => {
        await delay(0);
        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
            : getValidateEndUserAccessTokenResponseMock()), { status: 200, headers: { "Content-Type": "application/json" } });
    });
};
export const getEndUserAccountsMock = () => [getValidateEndUserAccessTokenMockHandler()];
//# sourceMappingURL=end-user-accounts.msw.js.map